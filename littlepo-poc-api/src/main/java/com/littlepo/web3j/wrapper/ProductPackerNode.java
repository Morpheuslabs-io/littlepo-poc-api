package com.littlepo.web3j.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class ProductPackerNode extends Contract {
    private static final String BINARY = "0x608060405260008054600160a060020a03191633179055613c5a806100256000396000f300608060405260043610620000e95763ffffffff60e060020a6000350416631785f53c8114620000ee57806327a099d8146200011457806331ae450b146200017e5780633b86d5ce146200019657806349334ee514620001ce5780635445647d14620001f15780635599e55b146200020c5780637048027514620002405780637a12b9c514620002645780638ca056b214620002885780638da5cb5b14620002e55780639870d7fe14620002fd578063ac8a584a1462000321578063d977e6be1462000345578063f2fde38b1462000360578063f7aca2cb1462000384578063fffbebdd14620003ae575b600080fd5b348015620000fb57600080fd5b5062000112600160a060020a0360043516620003c6565b005b3480156200012157600080fd5b506200012c6200053a565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200016a57818101518382015260200162000150565b505050509050019250505060405180910390f35b3480156200018b57600080fd5b506200012c6200059f565b348015620001a357600080fd5b50620001ba600160a060020a036004351662000601565b604080519115158252519081900360200190f35b348015620001db57600080fd5b50620001ba60048035602481019101356200065c565b348015620001fe57600080fd5b506200012c60043562000fc9565b3480156200021957600080fd5b50620002246200165f565b60408051600160a060020a039092168252519081900360200190f35b3480156200024d57600080fd5b5062000112600160a060020a03600435166200166e565b3480156200027157600080fd5b50620001ba600160a060020a036004351662001767565b3480156200029557600080fd5b50604080516020600460248035828101358481028087018601909752808652620001ba96843596369660449591949091019291829185019084908082843750949750620018229650505050505050565b348015620002f257600080fd5b50620002246200212f565b3480156200030a57600080fd5b5062000112600160a060020a03600435166200213e565b3480156200032e57600080fd5b5062000112600160a060020a036004351662002235565b3480156200035257600080fd5b506200012c6004356200235a565b3480156200036d57600080fd5b5062000112600160a060020a0360043516620023c8565b3480156200039157600080fd5b506200039c620023ee565b60408051918252519081900360200190f35b348015620003bb57600080fd5b506200022462002412565b60008054600160a060020a03163314620003df57600080fd5b600160a060020a03821660009081526002602052604090205460ff1615156200040757600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b600454811015620005365781600160a060020a03166004828154811015156200044e57fe5b600091825260209091200154600160a060020a031614156200052d576004805460001981019081106200047d57fe5b60009182526020909120015460048054600160a060020a039092169183908110620004a457fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600480546000190190620004e2908262002492565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a162000536565b60010162000429565b5050565b606060038054806020026020016040519081016040528092919081815260200182805480156200059457602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162000575575b505050505090505b90565b606060048054806020026020016040519081016040528092919081815260200182805480156200059457602002820191906000526020600020908154600160a060020a0316815260019091019060200180831162000575575050505050905090565b60008054600160a060020a03163314806200062b57503360009081526002602052604090205460ff165b15156200063757600080fd5b5060088054600160a060020a038316600160a060020a03199091161790556001919050565b6000805481906060908290600160a060020a03163314806200068d57503360009081526001602052604090205460ff165b15156200069957600080fd5b600754600160a060020a03161515620006fc576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b600b85146200077b576040805160e560020a62461bcd02815260206004820152602960248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652031310000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006005818888828181106200078d57fe5b6020908102929092013583525081019190915260400160002054600160a060020a03161462000806576040805160e560020a62461bcd02815260206004820152601a60248201527f5061636b61676520697320616c72656164792063726561746564000000000000604482015290519081900360640190fd5b600754600160a060020a031663a212cc83878760018181106200082557fe5b6040805160e060020a63ffffffff87160281526020928302949094013560048501525160248085019492935090918290030181600087803b1580156200086a57600080fd5b505af11580156200087f573d6000803e3d6000fd5b505050506040513d60208110156200089657600080fd5b50519250600160a060020a0383161515620008fb576040805160e560020a62461bcd02815260206004820152601760248201527f6242617463684e6f20646f6573206e6f74206578697374000000000000000000604482015290519081900360640190fd5b60408051600b8082526101808201909252906020820161016080388339019050509150858560008181106200092c57fe5b90506020020135600019168260008151811015156200094757fe5b6020908102909101810191909152604080517f073fae830000000000000000000000000000000000000000000000000000000081529051600160a060020a0386169263073fae8392600480820193918290030181600087803b158015620009ad57600080fd5b505af1158015620009c2573d6000803e3d6000fd5b505050506040513d6020811015620009d957600080fd5b5051825183906001908110620009eb57fe5b602090810290910101528585600281811062000a0357fe5b905060200201356000191682600281518110151562000a1e57fe5b602090810290910101528585600381811062000a3657fe5b905060200201356000191682600381518110151562000a5157fe5b602090810290910101528585600481811062000a6957fe5b905060200201356000191682600481518110151562000a8457fe5b602090810290910101528585600581811062000a9c57fe5b905060200201356000191682600581518110151562000ab757fe5b602090810290910101528585600681811062000acf57fe5b905060200201356000191682600681518110151562000aea57fe5b602090810290910101528585600781811062000b0257fe5b905060200201356000191682600781518110151562000b1d57fe5b602090810290910101528585600881811062000b3557fe5b905060200201356000191682600881518110151562000b5057fe5b602090810290910101528585600981811062000b6857fe5b905060200201356000191682600981518110151562000b8357fe5b602090810290910101528585600a81811062000b9b57fe5b905060200201356000191682600a81518110151562000bb657fe5b9060200190602002019060001916908160001916815250507f5061636b000000000000000000000000000000000000000000000000000000008284600160a060020a031663b2f4bdb06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000c2f57600080fd5b505af115801562000c44573d6000803e3d6000fd5b505050506040513d602081101562000c5b57600080fd5b505162000c67620024be565b838152604081018290526060602080830182815285519284019290925284516080840191868101910280838360005b8381101562000cb057818101518382015260200162000c96565b50505050905001945050505050604051809103906000f08015801562000cda573d6000803e3d6000fd5b509050806005600083600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000d2157600080fd5b505af115801562000d36573d6000803e3d6000fd5b505050506040513d602081101562000d4d57600080fd5b50518152602080820192909252604090810160009081208054600160a060020a031916600160a060020a0395861617905581517f13febc3600000000000000000000000000000000000000000000000000000000815291516006949193918616926313febc3692600480830193919282900301818787803b15801562000dd257600080fd5b505af115801562000de7573d6000803e3d6000fd5b505050506040513d602081101562000dfe57600080fd5b505181526020808201929092526040908101600090812080546001810182559082529281209092018054600160a060020a031916600160a060020a0385811691821790925560075483517f9870d7fe0000000000000000000000000000000000000000000000000000000081529216600483015291519192639870d7fe9260248084019382900301818387803b15801562000e9857600080fd5b505af115801562000ead573d6000803e3d6000fd5b50505050600760009054906101000a9004600160a060020a0316600160a060020a031663c924d9a882600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000f1457600080fd5b505af115801562000f29573d6000803e3d6000fd5b505050506040513d602081101562000f4057600080fd5b50516040805160e060020a63ffffffff85160281526004810192909252600160a060020a03851660248301525160448083019260209291908290030181600087803b15801562000f8f57600080fd5b505af115801562000fa4573d6000803e3d6000fd5b505050506040513d602081101562000fbb57600080fd5b506001979650505050505050565b600081815260056020908152604091829020548251600a8082526101608201909452606093600160a060020a039092169284929082016101408038833901905050905081600160a060020a031663073fae836040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200104b57600080fd5b505af115801562001060573d6000803e3d6000fd5b505050506040513d60208110156200107757600080fd5b50518151829060009081106200108957fe5b6020908102909101810191909152604080517f7f7650eb0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692637f7650eb92600480820193918290030181600087803b158015620010ef57600080fd5b505af115801562001104573d6000803e3d6000fd5b505050506040513d60208110156200111b57600080fd5b50518151829060019081106200112d57fe5b6020908102909101810191909152604080517f516f279e0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263516f279e92600480820193918290030181600087803b1580156200119357600080fd5b505af1158015620011a8573d6000803e3d6000fd5b505050506040513d6020811015620011bf57600080fd5b5051815182906002908110620011d157fe5b6020908102909101810191909152604080517fc5ce39110000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263c5ce391192600480820193918290030181600087803b1580156200123757600080fd5b505af11580156200124c573d6000803e3d6000fd5b505050506040513d60208110156200126357600080fd5b50518151829060039081106200127557fe5b6020908102909101810191909152604080517ff0935ec40000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f0935ec492600480820193918290030181600087803b158015620012db57600080fd5b505af1158015620012f0573d6000803e3d6000fd5b505050506040513d60208110156200130757600080fd5b50518151829060049081106200131957fe5b6020908102909101810191909152604080517f2e943fbd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692632e943fbd92600480820193918290030181600087803b1580156200137f57600080fd5b505af115801562001394573d6000803e3d6000fd5b505050506040513d6020811015620013ab57600080fd5b5051815182906005908110620013bd57fe5b6020908102909101810191909152604080517f30e4b9110000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926330e4b91192600480820193918290030181600087803b1580156200142357600080fd5b505af115801562001438573d6000803e3d6000fd5b505050506040513d60208110156200144f57600080fd5b50518151829060069081106200146157fe5b6020908102909101810191909152604080517ff4834bbc0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f4834bbc92600480820193918290030181600087803b158015620014c757600080fd5b505af1158015620014dc573d6000803e3d6000fd5b505050506040513d6020811015620014f357600080fd5b50518151829060079081106200150557fe5b6020908102909101810191909152604080517f13febc360000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926313febc3692600480820193918290030181600087803b1580156200156b57600080fd5b505af115801562001580573d6000803e3d6000fd5b505050506040513d60208110156200159757600080fd5b5051815182906008908110620015a957fe5b6020908102909101810191909152604080517fa1aab33f0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263a1aab33f92600480820193918290030181600087803b1580156200160f57600080fd5b505af115801562001624573d6000803e3d6000fd5b505050506040513d60208110156200163b57600080fd5b50518151829060099081106200164d57fe5b60209081029091010152915050919050565b600754600160a060020a031681565b600054600160a060020a031633146200168657600080fd5b600160a060020a03811660009081526002602052604090205460ff1615620016ad57600080fd5b600454601411620016bd57600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054600160a060020a0319169091179055565b60008054600160a060020a03163314806200179157503360009081526002602052604090205460ff165b15156200179d57600080fd5b600160a060020a0382161515620017fe576040805160e560020a62461bcd02815260206004820152601760248201527f496e76616c69642073746f726167652061646472657373000000000000000000604482015290519081900360640190fd5b60078054600160a060020a031916600160a060020a03939093169290921790915590565b60008054819081908190600160a060020a03163314806200185257503360009081526001602052604090205460ff165b15156200185e57600080fd5b600754600160a060020a03161515620018c1576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b8451600b1462001941576040805160e560020a62461bcd02815260206004820152602960248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652031310000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600086815260056020526040902054600160a060020a03161515620019b0576040805160e560020a62461bcd02815260206004820152601b60248201527f5061636b657220626174636820646f6573206e6f742065786973740000000000604482015290519081900360640190fd5b6008548551600160a060020a039091169063d977e6be9087906002908110620019d557fe5b906020019060200201516040518263ffffffff1660e060020a028152600401808260001916600019168152602001915050600060405180830381600087803b15801562001a2157600080fd5b505af115801562001a36573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101562001a6057600080fd5b81019080805164010000000081111562001a7957600080fd5b8201602081018481111562001a8d57600080fd5b815185602082028301116401000000008211171562001aab57600080fd5b50508051909350600092508210905062001ac157fe5b602090810290910101519250600160a060020a038316151562001b2e576040805160e560020a62461bcd02815260206004820152601760248201527f6442617463684e6f20646f6573206e6f74206578697374000000000000000000604482015290519081900360640190fd5b60008681526005602090815260408083205481517ff48082100000000000000000000000000000000000000000000000000000000081529151600160a060020a0390911695507f5061636b00000000000000000000000000000000000000000000000000000000938993879363f48082109360048083019491928390030190829087803b15801562001bbf57600080fd5b505af115801562001bd4573d6000803e3d6000fd5b505050506040513d602081101562001beb57600080fd5b505162001bf7620024be565b838152604081018290526060602080830182815285519284019290925284516080840191868101910280838360005b8381101562001c4057818101518382015260200162001c26565b50505050905001945050505050604051809103906000f08015801562001c6a573d6000803e3d6000fd5b50905080600160a060020a031663604080f784600160a060020a031663139d7fed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562001cbb57600080fd5b505af115801562001cd0573d6000803e3d6000fd5b505050506040513d602081101562001ce757600080fd5b5051604080517ff78b0be00000000000000000000000000000000000000000000000000000000081529051600160a060020a0388169163f78b0be09160048083019260209291908290030181600087803b15801562001d4557600080fd5b505af115801562001d5a573d6000803e3d6000fd5b505050506040513d602081101562001d7157600080fd5b5051604080517ff48082100000000000000000000000000000000000000000000000000000000081529051600160a060020a0388169163f48082109160048083019260209291908290030181600087803b15801562001dcf57600080fd5b505af115801562001de4573d6000803e3d6000fd5b505050506040513d602081101562001dfb57600080fd5b50516040805160e060020a63ffffffff87160281526004810194909452602484019290925260448301525160648083019260209291908290030181600087803b15801562001e4857600080fd5b505af115801562001e5d573d6000803e3d6000fd5b505050506040513d602081101562001e7457600080fd5b5050600754604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519183169163f2fde38b9160248082019260009290919082900301818387803b15801562001ede57600080fd5b505af115801562001ef3573d6000803e3d6000fd5b50505050806005600083600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562001f3b57600080fd5b505af115801562001f50573d6000803e3d6000fd5b505050506040513d602081101562001f6757600080fd5b50518152602080820192909252604090810160009081208054600160a060020a031916600160a060020a0395861617905560075482517fc924d9a8000000000000000000000000000000000000000000000000000000008152600481018c90528686166024820152925194169363c924d9a8936044808501949193918390030190829087803b15801562001ffa57600080fd5b505af11580156200200f573d6000803e3d6000fd5b505050506040513d60208110156200202657600080fd5b5050600754604080517f1ddba66c00000000000000000000000000000000000000000000000000000000815260048101899052600160a060020a03848116602483015291519190921691631ddba66c9160448083019260209291908290030181600087803b1580156200209857600080fd5b505af1158015620020ad573d6000803e3d6000fd5b505050506040513d6020811015620020c457600080fd5b5050600754604080517f992b76da000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163992b76da9160248083019260209291908290030181600087803b15801562000f8f57600080fd5b600054600160a060020a031681565b600054600160a060020a031633146200215657600080fd5b600160a060020a03811660009081526001602052604090205460ff16156200217d57600080fd5b6003546014116200218d57600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018054600160a060020a0319169091179055565b60008054600160a060020a031633146200224e57600080fd5b600160a060020a03821660009081526001602052604090205460ff1615156200227657600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b600354811015620005365781600160a060020a0316600382815481101515620022bd57fe5b600091825260209091200154600160a060020a031614156200235157600380546000198101908110620022ec57fe5b60009182526020909120015460038054600160a060020a0390921691839081106200231357fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600380546000190190620004e2908262002492565b60010162002298565b600081815260066020908152604091829020805483518184028101840190945280845260609392830182828015620023bc57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116200239d575b50505050509050919050565b600054600160a060020a03163314620023e057600080fd5b620023eb8162002421565b50565b7f5061636b0000000000000000000000000000000000000000000000000000000090565b600854600160a060020a031681565b600160a060020a03811615156200243757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b815481835581811115620024b957600083815260209020620024b9918101908301620024cf565b505050565b60405161173e80620024f183390190565b6200059c91905b80821115620024ec5760008155600101620024d6565b509056006080604052606460185560016019556001601d553480156200002057600080fd5b506040516200173e3803806200173e833981016040908152815160208301519183015160008054600160a060020a03191633178155600583905592909301805191939092909183919081106200007257fe5b602090810290910101516006558151829060019081106200008f57fe5b60209081029091010151601f55815182906002908110620000ac57fe5b60209081029091010151601755815182906003908110620000c957fe5b60209081029091010151600855815182906004908110620000e657fe5b602090810290910101516009558151829060059081106200010357fe5b60209081029091010151600a558151829060069081106200012057fe5b60209081029091010151600c558151829060079081106200013d57fe5b60209081029091010151600d558151829060089081106200015a57fe5b60209081029091010151600e558151829060099081106200017757fe5b60209081029091010151600b5581518290600a9081106200019457fe5b60209081029091010151601e55601055505042601181905560125561157f80620001bf6000396000f3006080604052600436106101ed5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663073fae8381146101f2578063139d7fed1461021957806313febc361461022e5780631785f53c14610243578063187fdb6d146102665780631eee993a1461029257806320982bce146102b357806327a099d8146102cb5780632e943fbd1461033057806330e4b9111461034557806331ae450b1461035a5780633571ee351461036f578063516f279e1461038757806354fd4d501461039c578063604080f7146103b157806370480275146103cf57806371bc9d9a146103f05780637f7650eb1461040857806382aefefb1461041d57806383240f83146104355780638920c3391461044d5780638c835736146104655780638da5cb5b1461047a5780639870d7fe146104ab5780639ac80dce146104cc5780639c6f2b25146104e1578063a1aab33f146105d4578063aa15efc8146105e9578063ac8a584a146105fe578063b26e642b1461061f578063b2f4bdb014610637578063c5ce39111461064c578063df4857ec14610661578063eb2c89a314610679578063f0935ec41461068e578063f2fde38b146106a3578063f375d94a146106c4578063f4808210146106d9578063f4834bbc146106ee578063f78b0be014610703575b600080fd5b3480156101fe57600080fd5b50610207610718565b60408051918252519081900360200190f35b34801561022557600080fd5b5061020761071e565b34801561023a57600080fd5b50610207610724565b34801561024f57600080fd5b50610264600160a060020a036004351661072a565b005b34801561027257600080fd5b5061027e6004356108a0565b604080519115158252519081900360200190f35b34801561029e57600080fd5b5061027e600160a060020a03600435166108dd565b3480156102bf57600080fd5b50610207600435610b28565b3480156102d757600080fd5b506102e0610b47565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561031c578181015183820152602001610304565b505050509050019250505060405180910390f35b34801561033c57600080fd5b50610207610baa565b34801561035157600080fd5b50610207610bb0565b34801561036657600080fd5b506102e0610bb6565b34801561037b57600080fd5b50610207600435610c16565b34801561039357600080fd5b50610207610c24565b3480156103a857600080fd5b50610207610c2a565b3480156103bd57600080fd5b5061027e600435602435604435610c30565b3480156103db57600080fd5b50610264600160a060020a0360043516610d6b565b3480156103fc57600080fd5b5061027e600435610e6e565b34801561041457600080fd5b50610207610eab565b34801561042957600080fd5b50610207600435610eb1565b34801561044157600080fd5b50610207600435610ebf565b34801561045957600080fd5b50610207600435610ecd565b34801561047157600080fd5b50610207610edb565b34801561048657600080fd5b5061048f610ee1565b60408051600160a060020a039092168252519081900360200190f35b3480156104b757600080fd5b50610264600160a060020a0360043516610ef0565b3480156104d857600080fd5b50610207610ff1565b3480156104ed57600080fd5b506104f6610ff7565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561053e578181015183820152602001610526565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561057d578181015183820152602001610565565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156105bc5781810151838201526020016105a4565b50505050905001965050505050505060405180910390f35b3480156105e057600080fd5b5061020761110f565b3480156105f557600080fd5b506104f6611115565b34801561060a57600080fd5b50610264600160a060020a0360043516611222565b34801561062b57600080fd5b5061048f60043561134a565b34801561064357600080fd5b50610207611372565b34801561065857600080fd5b50610207611378565b34801561066d57600080fd5b5061027e60043561137e565b34801561068557600080fd5b50610207611448565b34801561069a57600080fd5b5061020761144e565b3480156106af57600080fd5b50610264600160a060020a0360043516611454565b3480156106d057600080fd5b50610207611477565b3480156106e557600080fd5b5061020761147d565b3480156106fa57600080fd5b50610207611483565b34801561070f57600080fd5b50610207611489565b60175481565b60055481565b601f5481565b60008054600160a060020a0316331461074257600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561076957600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b60045481101561089c5781600160a060020a03166004828154811015156107ae57fe5b600091825260209091200154600160a060020a03161415610894576004805460001981019081106107db57fe5b60009182526020909120015460048054600160a060020a03909216918390811061080157fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560048054600019019061084a908261150c565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a161089c565b60010161078b565b5050565b60008054600160a060020a03163314806108c957503360009081526001602052604090205460ff165b15156108d457600080fd5b600f9190915590565b60008054600160a060020a031633148061090657503360009081526001602052604090205460ff165b151561091157600080fd5b601854601d541061098357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f43616e6e6f7420616464206d6f7265206368696c640000000000000000000000604482015290519081900360640190fd5b601a82600160a060020a031663f78b0be06040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156109dc57600080fd5b505af11580156109f0573d6000803e3d6000fd5b505050506040513d6020811015610a0657600080fd5b505181546001810183556000928352602080842090910191909155604080517f7f7650eb0000000000000000000000000000000000000000000000000000000081529051601b93600160a060020a03871693637f7650eb936004808201949293918390030190829087803b158015610a7d57600080fd5b505af1158015610a91573d6000803e3d6000fd5b505050506040513d6020811015610aa757600080fd5b505181546001818101845560009384526020842090910191909155601c8054808301825592527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a2119091018054600160a060020a03851673ffffffffffffffffffffffffffffffffffffffff19909116179055601d8054820190559050919050565b6016805482908110610b3657fe5b600091825260209091200154905081565b60606003805480602002602001604051908101604052809291908181526020018280548015610b9f57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610b81575b505050505090505b90565b600c5481565b600d5481565b60606004805480602002602001604051908101604052809291908181526020018280548015610b9f57602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610b81575050505050905090565b601a805482908110610b3657fe5b60095481565b60195481565b60008054600160a060020a0316331480610c5957503360009081526001602052604090205460ff165b1515610c6457600080fd5b60008211610cd357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420686973746f72792074696d65000000000000000000000000604482015290519081900360640190fd5b506014805460018082019092557fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0193909355601580548085019091557f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47501919091556016805480840182556000919091527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b5124289015590565b600054600160a060020a03163314610d8257600080fd5b600160a060020a03811660009081526002602052604090205460ff1615610da857600080fd5b600454601411610db757600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60008054600160a060020a0316331480610e9757503360009081526001602052604090205460ff165b1515610ea257600080fd5b60139190915590565b60085481565b601b805482908110610b3657fe5b6014805482908110610b3657fe5b6015805482908110610b3657fe5b601d5481565b600054600160a060020a031681565b600054600160a060020a03163314610f0757600080fd5b600160a060020a03811660009081526001602052604090205460ff1615610f2d57600080fd5b600354601411610f3c57600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60135481565b6060806060601a601b601c8280548060200260200160405190810160405280929190818152602001828054801561104e57602002820191906000526020600020905b81548152600190910190602001808311611039575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156110a157602002820191906000526020600020905b8154815260019091019060200180831161108c575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156110fd57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116110df575b50505050509050925092509250909192565b601e5481565b60608060606014601560168280548060200260200160405190810160405280929190818152602001828054801561116c57602002820191906000526020600020905b81548152600190910190602001808311611157575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156111bf57602002820191906000526020600020905b815481526001909101906020018083116111aa575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156110fd57602002820191906000526020600020905b8154815260200190600101908083116111fd5750505050509050925092509250909192565b60008054600160a060020a0316331461123a57600080fd5b600160a060020a03821660009081526001602052604090205460ff16151561126157600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b60035481101561089c5781600160a060020a03166003828154811015156112a657fe5b600091825260209091200154600160a060020a03161415611342576003805460001981019081106112d357fe5b60009182526020909120015460038054600160a060020a0390921691839081106112f957fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560038054600019019061084a908261150c565b600101611283565b601c80548290811061135857fe5b600091825260209091200154600160a060020a0316905081565b60115481565b600a5481565b600080548190600160a060020a03163314806113a957503360009081526001602052604090205460ff165b15156113b457600080fd5b5060005b601a5481101561144257601a8054849190839081106113d357fe5b600091825260209091200154141561143a57601a6001601d54038154811015156113f957fe5b9060005260206000200154601a8281548110151561141357fe5b600091825260209091200155601d54601a805490916000190190811061143557fe5b506000525b6001016113b8565b50919050565b600f5481565b600b5481565b600054600160a060020a0316331461146b57600080fd5b6114748161148f565b50565b60125481565b60105481565b600e5481565b60065481565b600160a060020a03811615156114a457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81548183558181111561153057600083815260209020611530918101908301611535565b505050565b610ba791905b8082111561154f576000815560010161153b565b50905600a165627a7a7230582013d0d2941c68f0d3e333776a67cfce5315a4150fa272d9804cc8a52cb79a75b00029a165627a7a7230582069db69d895b5fb0a279b5930e47f07318bb524d1e9939ded7be85750fce940b90029";

    public static final String FUNC_REMOVEADMIN = "removeAdmin";

    public static final String FUNC_GETOPERATORS = "getOperators";

    public static final String FUNC_GETADMINS = "getAdmins";

    public static final String FUNC_SETPREVIOUSNODE = "setPreviousNode";

    public static final String FUNC_LITTLEPOPRODUCTHISTORY = "littlepoProductHistory";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_SETPRODUCTSTORAGE = "setProductStorage";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_REMOVEOPERATOR = "removeOperator";

    public static final String FUNC_GETPRODUCTBATCHBYBATCHNO = "getProductBatchByBatchNo";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_PREVIOUSNODE = "previousNode";

    public static final String FUNC_GETNODENAME = "getNodeName";

    public static final String FUNC_CREATEPRODUCTBATCH = "createProductBatch";

    public static final String FUNC_ADDTEABAGBATCH = "addTeaBagBatch";

    public static final String FUNC_GETPRODUCTBATCHINFO = "getProductBatchInfo";

    public static final Event OPERATORADDED_EVENT = new Event("OperatorAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ADMINADDED_EVENT = new Event("AdminAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected ProductPackerNode(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProductPackerNode(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProductPackerNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProductPackerNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> removeAdmin(Address admin) {
        final Function function = new Function(
                FUNC_REMOVEADMIN, 
                Arrays.<Type>asList(admin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getOperators() {
        final Function function = new Function(FUNC_GETOPERATORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Address>> getAdmins() {
        final Function function = new Function(FUNC_GETADMINS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setPreviousNode(Address _baseNode) {
        final Function function = new Function(
                FUNC_SETPREVIOUSNODE, 
                Arrays.<Type>asList(_baseNode), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> littlepoProductHistory() {
        final Function function = new Function(FUNC_LITTLEPOPRODUCTHISTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(Address newAdmin) {
        final Function function = new Function(
                FUNC_ADDADMIN, 
                Arrays.<Type>asList(newAdmin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setProductStorage(Address _littlepoProductHistory) {
        final Function function = new Function(
                FUNC_SETPRODUCTSTORAGE, 
                Arrays.<Type>asList(_littlepoProductHistory), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addOperator(Address newOperator) {
        final Function function = new Function(
                FUNC_ADDOPERATOR, 
                Arrays.<Type>asList(newOperator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeOperator(Address operator) {
        final Function function = new Function(
                FUNC_REMOVEOPERATOR, 
                Arrays.<Type>asList(operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getProductBatchByBatchNo(Bytes32 _bBatchNo) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHBYBATCHNO, 
                Arrays.<Type>asList(_bBatchNo), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> previousNode() {
        final Function function = new Function(FUNC_PREVIOUSNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<OperatorAddedEventResponse> getOperatorAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATORADDED_EVENT, transactionReceipt);
        ArrayList<OperatorAddedEventResponse> responses = new ArrayList<OperatorAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OperatorAddedEventResponse>() {
            @Override
            public OperatorAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OPERATORADDED_EVENT, log);
                OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OPERATORADDED_EVENT));
        return operatorAddedEventObservable(filter);
    }

    public List<AdminAddedEventResponse> getAdminAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINADDED_EVENT, transactionReceipt);
        ArrayList<AdminAddedEventResponse> responses = new ArrayList<AdminAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AdminAddedEventResponse>() {
            @Override
            public AdminAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINADDED_EVENT, log);
                AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINADDED_EVENT));
        return adminAddedEventObservable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public RemoteCall<Bytes32> getNodeName() {
        final Function function = new Function(FUNC_GETNODENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> createProductBatch(DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_CREATEPRODUCTBATCH, 
                Arrays.<Type>asList(bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTeaBagBatch(Bytes32 _packerBatchQRId, DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_ADDTEABAGBATCH, 
                Arrays.<Type>asList(_packerBatchQRId, bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getProductBatchInfo(Bytes32 _qrCodeId) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHINFO, 
                Arrays.<Type>asList(_qrCodeId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductPackerNode.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductPackerNode.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductPackerNode.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductPackerNode.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static ProductPackerNode load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductPackerNode(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProductPackerNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductPackerNode(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProductPackerNode load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ProductPackerNode(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProductPackerNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProductPackerNode(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OperatorAddedEventResponse {
        public Log log;

        public Address newOperator;

        public Bool isAdd;
    }

    public static class AdminAddedEventResponse {
        public Log log;

        public Address newAdmin;

        public Bool isAdd;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
