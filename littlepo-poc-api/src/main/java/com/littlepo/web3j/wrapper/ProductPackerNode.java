package com.littlepo.web3j.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class ProductPackerNode extends Contract {
    private static final String BINARY = "0x608060405260008054600160a060020a03191633179055614816806100256000396000f300608060405260043610620000e95763ffffffff60e060020a6000350416631785f53c8114620000ee57806327a099d8146200011457806331ae450b146200017e5780633b86d5ce146200019657806349334ee514620001ce5780635445647d14620001f15780635599e55b146200020c5780637048027514620002405780637a12b9c514620002645780638ca056b214620002885780638da5cb5b14620002e55780639870d7fe14620002fd578063ac8a584a1462000321578063d977e6be1462000345578063f2fde38b1462000360578063f7aca2cb1462000384578063fffbebdd14620003ae575b600080fd5b348015620000fb57600080fd5b5062000112600160a060020a0360043516620003c6565b005b3480156200012157600080fd5b506200012c6200053a565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200016a57818101518382015260200162000150565b505050509050019250505060405180910390f35b3480156200018b57600080fd5b506200012c6200059f565b348015620001a357600080fd5b50620001ba600160a060020a036004351662000601565b604080519115158252519081900360200190f35b348015620001db57600080fd5b50620001ba60048035602481019101356200065c565b348015620001fe57600080fd5b506200012c60043562000cd6565b3480156200021957600080fd5b50620002246200136c565b60408051600160a060020a039092168252519081900360200190f35b3480156200024d57600080fd5b5062000112600160a060020a03600435166200137b565b3480156200027157600080fd5b50620001ba600160a060020a036004351662001474565b3480156200029557600080fd5b50604080516020600460248035828101358481028087018601909752808652620001ba968435963696604495919490910192918291850190849080828437509497506200152f9650505050505050565b348015620002f257600080fd5b506200022462001d02565b3480156200030a57600080fd5b5062000112600160a060020a036004351662001d11565b3480156200032e57600080fd5b5062000112600160a060020a036004351662001e08565b3480156200035257600080fd5b506200012c60043562001f2d565b3480156200036d57600080fd5b5062000112600160a060020a036004351662001f9b565b3480156200039157600080fd5b506200039c62001fc1565b60408051918252519081900360200190f35b348015620003bb57600080fd5b506200022462001fe5565b60008054600160a060020a03163314620003df57600080fd5b600160a060020a03821660009081526002602052604090205460ff1615156200040757600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b600454811015620005365781600160a060020a03166004828154811015156200044e57fe5b600091825260209091200154600160a060020a031614156200052d576004805460001981019081106200047d57fe5b60009182526020909120015460048054600160a060020a039092169183908110620004a457fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600480546000190190620004e2908262002065565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a162000536565b60010162000429565b5050565b606060038054806020026020016040519081016040528092919081815260200182805480156200059457602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162000575575b505050505090505b90565b606060048054806020026020016040519081016040528092919081815260200182805480156200059457602002820191906000526020600020908154600160a060020a0316815260019091019060200180831162000575575050505050905090565b60008054600160a060020a03163314806200062b57503360009081526002602052604090205460ff165b15156200063757600080fd5b5060088054600160a060020a038316600160a060020a03199091161790556001919050565b6000805481908190600160a060020a03163314806200068a57503360009081526001602052604090205460ff165b15156200069657600080fd5b600754600160a060020a03161515620006f9576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b600b841462000778576040805160e560020a62461bcd02815260206004820152602960248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652031310000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006005818787828181106200078a57fe5b6020908102929092013583525081019190915260400160002054600160a060020a03161462000803576040805160e560020a62461bcd02815260206004820152601a60248201527f5061636b61676520697320616c72656164792063726561746564000000000000604482015290519081900360640190fd5b600854600160a060020a031663d977e6be868660028181106200082257fe5b6040805160e060020a63ffffffff871602815260209092029390930135600482015291516024808401936000935082900301818387803b1580156200086657600080fd5b505af11580156200087b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015620008a557600080fd5b810190808051640100000000811115620008be57600080fd5b82016020810184811115620008d257600080fd5b8151856020820283011164010000000082111715620008f057600080fd5b5050805190935060009250821090506200090657fe5b602090810290910101519150600160a060020a038216151562000973576040805160e560020a62461bcd02815260206004820152601760248201527f6242617463684e6f20646f6573206e6f74206578697374000000000000000000604482015290519081900360640190fd5b7f5061636b65724e6f6465000000000000000000000000000000000000000000008585620009a062002091565b83815260406020808301828152918301849052606083019085908502808284378201915050945050505050604051809103906000f080158015620009e8573d6000803e3d6000fd5b509050806005600083600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000a2f57600080fd5b505af115801562000a44573d6000803e3d6000fd5b505050506040513d602081101562000a5b57600080fd5b50518152602080820192909252604090810160009081208054600160a060020a031916600160a060020a0395861617905581517f13febc3600000000000000000000000000000000000000000000000000000000815291516006949193918616926313febc3692600480830193919282900301818787803b15801562000ae057600080fd5b505af115801562000af5573d6000803e3d6000fd5b505050506040513d602081101562000b0c57600080fd5b505181526020808201929092526040908101600090812080546001810182559082529281209092018054600160a060020a031916600160a060020a0385811691821790925560075483517f9870d7fe0000000000000000000000000000000000000000000000000000000081529216600483015291519192639870d7fe9260248084019382900301818387803b15801562000ba657600080fd5b505af115801562000bbb573d6000803e3d6000fd5b50505050600760009054906101000a9004600160a060020a0316600160a060020a031663c924d9a882600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000c2257600080fd5b505af115801562000c37573d6000803e3d6000fd5b505050506040513d602081101562000c4e57600080fd5b50516040805160e060020a63ffffffff85160281526004810192909252600160a060020a03851660248301525160448083019260209291908290030181600087803b15801562000c9d57600080fd5b505af115801562000cb2573d6000803e3d6000fd5b505050506040513d602081101562000cc957600080fd5b5060019695505050505050565b600081815260056020908152604091829020548251600a8082526101608201909452606093600160a060020a039092169284929082016101408038833901905050905081600160a060020a031663073fae836040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000d5857600080fd5b505af115801562000d6d573d6000803e3d6000fd5b505050506040513d602081101562000d8457600080fd5b505181518290600090811062000d9657fe5b6020908102909101810191909152604080517f7f7650eb0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692637f7650eb92600480820193918290030181600087803b15801562000dfc57600080fd5b505af115801562000e11573d6000803e3d6000fd5b505050506040513d602081101562000e2857600080fd5b505181518290600190811062000e3a57fe5b6020908102909101810191909152604080517f516f279e0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263516f279e92600480820193918290030181600087803b15801562000ea057600080fd5b505af115801562000eb5573d6000803e3d6000fd5b505050506040513d602081101562000ecc57600080fd5b505181518290600290811062000ede57fe5b6020908102909101810191909152604080517fc5ce39110000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263c5ce391192600480820193918290030181600087803b15801562000f4457600080fd5b505af115801562000f59573d6000803e3d6000fd5b505050506040513d602081101562000f7057600080fd5b505181518290600390811062000f8257fe5b6020908102909101810191909152604080517ff0935ec40000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f0935ec492600480820193918290030181600087803b15801562000fe857600080fd5b505af115801562000ffd573d6000803e3d6000fd5b505050506040513d60208110156200101457600080fd5b50518151829060049081106200102657fe5b6020908102909101810191909152604080517f2e943fbd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692632e943fbd92600480820193918290030181600087803b1580156200108c57600080fd5b505af1158015620010a1573d6000803e3d6000fd5b505050506040513d6020811015620010b857600080fd5b5051815182906005908110620010ca57fe5b6020908102909101810191909152604080517f30e4b9110000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926330e4b91192600480820193918290030181600087803b1580156200113057600080fd5b505af115801562001145573d6000803e3d6000fd5b505050506040513d60208110156200115c57600080fd5b50518151829060069081106200116e57fe5b6020908102909101810191909152604080517ff4834bbc0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f4834bbc92600480820193918290030181600087803b158015620011d457600080fd5b505af1158015620011e9573d6000803e3d6000fd5b505050506040513d60208110156200120057600080fd5b50518151829060079081106200121257fe5b6020908102909101810191909152604080517f13febc360000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926313febc3692600480820193918290030181600087803b1580156200127857600080fd5b505af11580156200128d573d6000803e3d6000fd5b505050506040513d6020811015620012a457600080fd5b5051815182906008908110620012b657fe5b6020908102909101810191909152604080517fa1aab33f0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263a1aab33f92600480820193918290030181600087803b1580156200131c57600080fd5b505af115801562001331573d6000803e3d6000fd5b505050506040513d60208110156200134857600080fd5b50518151829060099081106200135a57fe5b60209081029091010152915050919050565b600754600160a060020a031681565b600054600160a060020a031633146200139357600080fd5b600160a060020a03811660009081526002602052604090205460ff1615620013ba57600080fd5b600454601411620013ca57600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054600160a060020a0319169091179055565b60008054600160a060020a03163314806200149e57503360009081526002602052604090205460ff165b1515620014aa57600080fd5b600160a060020a03821615156200150b576040805160e560020a62461bcd02815260206004820152601760248201527f496e76616c69642073746f726167652061646472657373000000000000000000604482015290519081900360640190fd5b60078054600160a060020a031916600160a060020a03939093169290921790915590565b6000805481908190600160a060020a03163314806200155d57503360009081526001602052604090205460ff165b15156200156957600080fd5b600754600160a060020a03161515620015cc576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b8351600a146200164c576040805160e560020a62461bcd02815260206004820152602960248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652031300000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600085815260056020526040902054600160a060020a03161515620016bb576040805160e560020a62461bcd02815260206004820152601b60248201527f5061636b657220626174636820646f6573206e6f742065786973740000000000604482015290519081900360640190fd5b6008548451600160a060020a039091169063d977e6be9086906002908110620016e057fe5b906020019060200201516040518263ffffffff1660e060020a028152600401808260001916600019168152602001915050600060405180830381600087803b1580156200172c57600080fd5b505af115801562001741573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156200176b57600080fd5b8101908080516401000000008111156200178457600080fd5b820160208101848111156200179857600080fd5b8151856020820283011164010000000082111715620017b657600080fd5b505080519093506000925082109050620017cc57fe5b602090810290910101519150600160a060020a038216151562001839576040805160e560020a62461bcd02815260206004820152601760248201527f6442617463684e6f20646f6573206e6f74206578697374000000000000000000604482015290519081900360640190fd5b7f5061636b65724e6f6465000000000000000000000000000000000000000000008462001865620020a2565b8281526040602080830182815284519284019290925283516060840191858101910280838360005b83811015620018a75781810151838201526020016200188d565b505050509050019350505050604051809103906000f080158015620018d0573d6000803e3d6000fd5b50905080600160a060020a031663604080f783600160a060020a031663139d7fed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200192157600080fd5b505af115801562001936573d6000803e3d6000fd5b505050506040513d60208110156200194d57600080fd5b5051604080517ff78b0be00000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163f78b0be09160048083019260209291908290030181600087803b158015620019ab57600080fd5b505af1158015620019c0573d6000803e3d6000fd5b505050506040513d6020811015620019d757600080fd5b5051604080517fb2f4bdb00000000000000000000000000000000000000000000000000000000081529051600160a060020a0388169163b2f4bdb09160048083019260209291908290030181600087803b15801562001a3557600080fd5b505af115801562001a4a573d6000803e3d6000fd5b505050506040513d602081101562001a6157600080fd5b50516040805160e060020a63ffffffff87160281526004810194909452602484019290925260448301525160648083019260209291908290030181600087803b15801562001aae57600080fd5b505af115801562001ac3573d6000803e3d6000fd5b505050506040513d602081101562001ada57600080fd5b5050600754604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519183169163f2fde38b9160248082019260009290919082900301818387803b15801562001b4457600080fd5b505af115801562001b59573d6000803e3d6000fd5b5050600754604080517fc924d9a8000000000000000000000000000000000000000000000000000000008152600481018a9052600160a060020a038681166024830152915191909216935063c924d9a8925060448083019260209291908290030181600087803b15801562001bcd57600080fd5b505af115801562001be2573d6000803e3d6000fd5b505050506040513d602081101562001bf957600080fd5b5050600754604080517f1ddba66c00000000000000000000000000000000000000000000000000000000815260048101889052600160a060020a03848116602483015291519190921691631ddba66c9160448083019260209291908290030181600087803b15801562001c6b57600080fd5b505af115801562001c80573d6000803e3d6000fd5b505050506040513d602081101562001c9757600080fd5b5050600754604080517f992b76da000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163992b76da9160248083019260209291908290030181600087803b15801562000c9d57600080fd5b600054600160a060020a031681565b600054600160a060020a0316331462001d2957600080fd5b600160a060020a03811660009081526001602052604090205460ff161562001d5057600080fd5b60035460141162001d6057600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018054600160a060020a0319169091179055565b60008054600160a060020a0316331462001e2157600080fd5b600160a060020a03821660009081526001602052604090205460ff16151562001e4957600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b600354811015620005365781600160a060020a031660038281548110151562001e9057fe5b600091825260209091200154600160a060020a0316141562001f245760038054600019810190811062001ebf57fe5b60009182526020909120015460038054600160a060020a03909216918390811062001ee657fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600380546000190190620004e2908262002065565b60010162001e6b565b60008181526006602090815260409182902080548351818402810184019094528084526060939283018282801562001f8f57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162001f70575b50505050509050919050565b600054600160a060020a0316331462001fb357600080fd5b62001fbe8162001ff4565b50565b7f5061636b65724e6f64650000000000000000000000000000000000000000000090565b600854600160a060020a031681565b600160a060020a03811615156200200a57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b8154818355818111156200208c576000838152602090206200208c918101908301620020b3565b505050565b60405161168580620020d583390190565b604051611091806200375a83390190565b6200059c91905b80821115620020d05760008155600101620020ba565b509056006080604052606460165560016017556001601b553480156200002057600080fd5b506040516200168538038062001685833981016040528051602082015160008054600160a060020a031916331781556005839055920180519192909182919081106200006857fe5b602090810290910101516006558051819060019081106200008557fe5b60209081029091010151601d55805181906002908110620000a257fe5b60209081029091010151601555805181906003908110620000bf57fe5b60209081029091010151600855805181906004908110620000dc57fe5b60209081029091010151600955805181906005908110620000f957fe5b60209081029091010151600a558051819060069081106200011657fe5b60209081029091010151600c558051819060079081106200013357fe5b60209081029091010151600d558051819060089081106200015057fe5b60209081029091010151600e558051819060099081106200016d57fe5b60209081029091010151600b5580518190600a9081106200018a57fe5b60209081029091010151601c55505042600f8190556010556114d380620001b26000396000f3006080604052600436106101cc5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663073fae8381146101d1578063139d7fed146101f857806313febc361461020d5780631785f53c146102225780631eee993a1461024557806320982bce1461027a57806327a099d8146102925780632e943fbd146102f757806330e4b9111461030c57806331ae450b146103215780633571ee3514610336578063516f279e1461034e57806354fd4d5014610363578063604080f714610378578063704802751461039657806371bc9d9a146103b75780637f7650eb146103cf57806382aefefb146103e457806383240f83146103fc5780638920c339146104145780638c8357361461042c5780638da5cb5b146104415780639870d7fe146104725780639ac80dce146104935780639c6f2b25146104a8578063a1aab33f1461059b578063aa15efc8146105b0578063ac8a584a146105c5578063b26e642b146105e6578063b2f4bdb0146105fe578063c5ce391114610613578063df4857ec14610628578063f0935ec414610640578063f2fde38b14610655578063f375d94a14610676578063f4834bbc1461068b578063f78b0be0146106a0575b600080fd5b3480156101dd57600080fd5b506101e66106b5565b60408051918252519081900360200190f35b34801561020457600080fd5b506101e66106bb565b34801561021957600080fd5b506101e66106c1565b34801561022e57600080fd5b50610243600160a060020a03600435166106c7565b005b34801561025157600080fd5b50610266600160a060020a036004351661083d565b604080519115158252519081900360200190f35b34801561028657600080fd5b506101e6600435610a88565b34801561029e57600080fd5b506102a7610aa7565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102e35781810151838201526020016102cb565b505050509050019250505060405180910390f35b34801561030357600080fd5b506101e6610b0a565b34801561031857600080fd5b506101e6610b10565b34801561032d57600080fd5b506102a7610b16565b34801561034257600080fd5b506101e6600435610b76565b34801561035a57600080fd5b506101e6610b84565b34801561036f57600080fd5b506101e6610b8a565b34801561038457600080fd5b50610266600435602435604435610b90565b3480156103a257600080fd5b50610243600160a060020a0360043516610ccb565b3480156103c357600080fd5b50610266600435610dce565b3480156103db57600080fd5b506101e6610e0b565b3480156103f057600080fd5b506101e6600435610e11565b34801561040857600080fd5b506101e6600435610e1f565b34801561042057600080fd5b506101e6600435610e2d565b34801561043857600080fd5b506101e6610e3b565b34801561044d57600080fd5b50610456610e41565b60408051600160a060020a039092168252519081900360200190f35b34801561047e57600080fd5b50610243600160a060020a0360043516610e50565b34801561049f57600080fd5b506101e6610f51565b3480156104b457600080fd5b506104bd610f57565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156105055781810151838201526020016104ed565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561054457818101518382015260200161052c565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561058357818101518382015260200161056b565b50505050905001965050505050505060405180910390f35b3480156105a757600080fd5b506101e661106f565b3480156105bc57600080fd5b506104bd611075565b3480156105d157600080fd5b50610243600160a060020a0360043516611182565b3480156105f257600080fd5b506104566004356112aa565b34801561060a57600080fd5b506101e66112d2565b34801561061f57600080fd5b506101e66112d8565b34801561063457600080fd5b506102666004356112de565b34801561064c57600080fd5b506101e66113a8565b34801561066157600080fd5b50610243600160a060020a03600435166113ae565b34801561068257600080fd5b506101e66113d1565b34801561069757600080fd5b506101e66113d7565b3480156106ac57600080fd5b506101e66113dd565b60155481565b60055481565b601d5481565b60008054600160a060020a031633146106df57600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561070657600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156108395781600160a060020a031660048281548110151561074b57fe5b600091825260209091200154600160a060020a031614156108315760048054600019810190811061077857fe5b60009182526020909120015460048054600160a060020a03909216918390811061079e57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556004805460001901906107e79082611460565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1610839565b600101610728565b5050565b60008054600160a060020a031633148061086657503360009081526001602052604090205460ff165b151561087157600080fd5b601654601b54106108e357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f43616e6e6f7420616464206d6f7265206368696c640000000000000000000000604482015290519081900360640190fd5b601882600160a060020a031663f78b0be06040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561093c57600080fd5b505af1158015610950573d6000803e3d6000fd5b505050506040513d602081101561096657600080fd5b505181546001810183556000928352602080842090910191909155604080517f7f7650eb0000000000000000000000000000000000000000000000000000000081529051601993600160a060020a03871693637f7650eb936004808201949293918390030190829087803b1580156109dd57600080fd5b505af11580156109f1573d6000803e3d6000fd5b505050506040513d6020811015610a0757600080fd5b505181546001818101845560009384526020842090910191909155601a8054808301825592527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e9091018054600160a060020a03851673ffffffffffffffffffffffffffffffffffffffff19909116179055601b8054820190559050919050565b6014805482908110610a9657fe5b600091825260209091200154905081565b60606003805480602002602001604051908101604052809291908181526020018280548015610aff57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610ae1575b505050505090505b90565b600c5481565b600d5481565b60606004805480602002602001604051908101604052809291908181526020018280548015610aff57602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610ae1575050505050905090565b6018805482908110610a9657fe5b60095481565b60175481565b60008054600160a060020a0316331480610bb957503360009081526001602052604090205460ff165b1515610bc457600080fd5b60008211610c3357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420686973746f72792074696d65000000000000000000000000604482015290519081900360640190fd5b506012805460018082019092557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440193909355601380548085019091557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001919091556014805480840182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec015590565b600054600160a060020a03163314610ce257600080fd5b600160a060020a03811660009081526002602052604090205460ff1615610d0857600080fd5b600454601411610d1757600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60008054600160a060020a0316331480610df757503360009081526001602052604090205460ff165b1515610e0257600080fd5b60119190915590565b60085481565b6019805482908110610a9657fe5b6012805482908110610a9657fe5b6013805482908110610a9657fe5b601b5481565b600054600160a060020a031681565b600054600160a060020a03163314610e6757600080fd5b600160a060020a03811660009081526001602052604090205460ff1615610e8d57600080fd5b600354601411610e9c57600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60115481565b606080606060186019601a82805480602002602001604051908101604052809291908181526020018280548015610fae57602002820191906000526020600020905b81548152600190910190602001808311610f99575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561100157602002820191906000526020600020905b81548152600190910190602001808311610fec575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561105d57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161103f575b50505050509050925092509250909192565b601c5481565b6060806060601260136014828054806020026020016040519081016040528092919081815260200182805480156110cc57602002820191906000526020600020905b815481526001909101906020018083116110b7575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561111f57602002820191906000526020600020905b8154815260019091019060200180831161110a575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561105d57602002820191906000526020600020905b81548152602001906001019080831161115d5750505050509050925092509250909192565b60008054600160a060020a0316331461119a57600080fd5b600160a060020a03821660009081526001602052604090205460ff1615156111c157600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b6003548110156108395781600160a060020a031660038281548110151561120657fe5b600091825260209091200154600160a060020a031614156112a25760038054600019810190811061123357fe5b60009182526020909120015460038054600160a060020a03909216918390811061125957fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556003805460001901906107e79082611460565b6001016111e3565b601a8054829081106112b857fe5b600091825260209091200154600160a060020a0316905081565b600f5481565b600a5481565b600080548190600160a060020a031633148061130957503360009081526001602052604090205460ff165b151561131457600080fd5b5060005b6018548110156113a257601880548491908390811061133357fe5b600091825260209091200154141561139a5760186001601b540381548110151561135957fe5b906000526020600020015460188281548110151561137357fe5b600091825260209091200155601b546018805490916000190190811061139557fe5b506000525b600101611318565b50919050565b600b5481565b600054600160a060020a031633146113c557600080fd5b6113ce816113e3565b50565b60105481565b600e5481565b60065481565b600160a060020a03811615156113f857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81548183558181111561148457600083815260209020611484918101908301611489565b505050565b610b0791905b808211156114a3576000815560010161148f565b50905600a165627a7a72305820ebe457b28eca7f5e8f7f41230b04cef39f69a406c78ae7632e67f500c69c886d0029608060405234801561001057600080fd5b50604051611091380380611091833981016040528051602082015160008054600160a060020a0319163317815560058390559201805191929091829190811061005557fe5b6020908102909101015160065580518190600190811061007157fe5b6020908102909101015160155580518190600290811061008d57fe5b602090810290910101516007558051819060039081106100a957fe5b602090810290910101516008558051819060049081106100c557fe5b602090810290910101516009558051819060059081106100e157fe5b60209081029091010151600a558051819060069081106100fd57fe5b60209081029091010151600b5580518190600790811061011957fe5b60209081029091010151600c5580518190600890811061013557fe5b60209081029091010151600d5580518190600990811061015157fe5b60209081029091010151600e55505042600f819055601055610f19806101786000396000f3006080604052600436106101695763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663073fae83811461016e578063139d7fed1461019557806313febc36146101aa5780631785f53c146101bf57806320982bce146101e257806327a099d8146101fa5780632e943fbd1461025f57806330e4b9111461027457806331ae450b14610289578063516f279e1461029e578063604080f7146102b357806370480275146102e557806371bc9d9a146103065780637f7650eb1461031e57806383240f83146103335780638920c3391461034b5780638da5cb5b146103635780639870d7fe146103945780639ac80dce146103b5578063aa15efc8146103ca578063ac8a584a146104bd578063b2f4bdb0146104de578063c5ce3911146104f3578063f0935ec414610508578063f2fde38b1461051d578063f375d94a1461053e578063f4834bbc14610553578063f78b0be014610568575b600080fd5b34801561017a57600080fd5b5061018361057d565b60408051918252519081900360200190f35b3480156101a157600080fd5b50610183610583565b3480156101b657600080fd5b50610183610589565b3480156101cb57600080fd5b506101e0600160a060020a036004351661058f565b005b3480156101ee57600080fd5b50610183600435610705565b34801561020657600080fd5b5061020f610724565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561024b578181015183820152602001610233565b505050509050019250505060405180910390f35b34801561026b57600080fd5b50610183610787565b34801561028057600080fd5b5061018361078d565b34801561029557600080fd5b5061020f610793565b3480156102aa57600080fd5b506101836107f3565b3480156102bf57600080fd5b506102d16004356024356044356107f9565b604080519115158252519081900360200190f35b3480156102f157600080fd5b506101e0600160a060020a0360043516610934565b34801561031257600080fd5b506102d1600435610a37565b34801561032a57600080fd5b50610183610a74565b34801561033f57600080fd5b50610183600435610a7a565b34801561035757600080fd5b50610183600435610a88565b34801561036f57600080fd5b50610378610a96565b60408051600160a060020a039092168252519081900360200190f35b3480156103a057600080fd5b506101e0600160a060020a0360043516610aa5565b3480156103c157600080fd5b50610183610ba6565b3480156103d657600080fd5b506103df610bac565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561042757818101518382015260200161040f565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561046657818101518382015260200161044e565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156104a557818101518382015260200161048d565b50505050905001965050505050505060405180910390f35b3480156104c957600080fd5b506101e0600160a060020a0360043516610cba565b3480156104ea57600080fd5b50610183610de2565b3480156104ff57600080fd5b50610183610de8565b34801561051457600080fd5b50610183610dee565b34801561052957600080fd5b506101e0600160a060020a0360043516610df4565b34801561054a57600080fd5b50610183610e17565b34801561055f57600080fd5b50610183610e1d565b34801561057457600080fd5b50610183610e23565b60075481565b60055481565b60155481565b60008054600160a060020a031633146105a757600080fd5b600160a060020a03821660009081526002602052604090205460ff1615156105ce57600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156107015781600160a060020a031660048281548110151561061357fe5b600091825260209091200154600160a060020a031614156106f95760048054600019810190811061064057fe5b60009182526020909120015460048054600160a060020a03909216918390811061066657fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556004805460001901906106af9082610ea6565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1610701565b6001016105f0565b5050565b601480548290811061071357fe5b600091825260209091200154905081565b6060600380548060200260200160405190810160405280929190818152602001828054801561077c57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161075e575b505050505090505b90565b600c5481565b600d5481565b6060600480548060200260200160405190810160405280929190818152602001828054801561077c57602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161075e575050505050905090565b60095481565b60008054600160a060020a031633148061082257503360009081526001602052604090205460ff165b151561082d57600080fd5b6000821161089c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420686973746f72792074696d65000000000000000000000000604482015290519081900360640190fd5b506012805460018082019092557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440193909355601380548085019091557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001919091556014805480840182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec015590565b600054600160a060020a0316331461094b57600080fd5b600160a060020a03811660009081526002602052604090205460ff161561097157600080fd5b60045460141161098057600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60008054600160a060020a0316331480610a6057503360009081526001602052604090205460ff165b1515610a6b57600080fd5b60119190915590565b60085481565b601280548290811061071357fe5b601380548290811061071357fe5b600054600160a060020a031681565b600054600160a060020a03163314610abc57600080fd5b600160a060020a03811660009081526001602052604090205460ff1615610ae257600080fd5b600354601411610af157600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60115481565b606080606060126013601482805480602002602001604051908101604052809291908181526020018280548015610c0357602002820191906000526020600020905b81548152600190910190602001808311610bee575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015610c5657602002820191906000526020600020905b81548152600190910190602001808311610c41575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610ca857602002820191906000526020600020905b815481526020019060010190808311610c94575b50505050509050925092509250909192565b60008054600160a060020a03163314610cd257600080fd5b600160a060020a03821660009081526001602052604090205460ff161515610cf957600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b6003548110156107015781600160a060020a0316600382815481101515610d3e57fe5b600091825260209091200154600160a060020a03161415610dda57600380546000198101908110610d6b57fe5b60009182526020909120015460038054600160a060020a039092169183908110610d9157fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556003805460001901906106af9082610ea6565b600101610d1b565b600f5481565b600a5481565b600b5481565b600054600160a060020a03163314610e0b57600080fd5b610e1481610e29565b50565b60105481565b600e5481565b60065481565b600160a060020a0381161515610e3e57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b815481835581811115610eca57600083815260209020610eca918101908301610ecf565b505050565b61078491905b80821115610ee95760008155600101610ed5565b50905600a165627a7a723058207b72cf305d0b9a9a6acb5fc60c277f26a88d4e11ea656197f947a009e77947f90029a165627a7a72305820541271d8d96db941154a003eb13d87ab72fe1ffa62763235773ccad42464868f0029";

    public static final String FUNC_REMOVEADMIN = "removeAdmin";

    public static final String FUNC_GETOPERATORS = "getOperators";

    public static final String FUNC_GETADMINS = "getAdmins";

    public static final String FUNC_SETPREVIOUSNODE = "setPreviousNode";

    public static final String FUNC_LITTLEPOPRODUCTHISTORY = "littlepoProductHistory";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_SETPRODUCTSTORAGE = "setProductStorage";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_REMOVEOPERATOR = "removeOperator";

    public static final String FUNC_GETPRODUCTBATCHBYBATCHNO = "getProductBatchByBatchNo";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_PREVIOUSNODE = "previousNode";

    public static final String FUNC_GETNODENAME = "getNodeName";

    public static final String FUNC_CREATEPRODUCTBATCH = "createProductBatch";

    public static final String FUNC_ADDTEABAGBATCH = "addTeaBagBatch";

    public static final String FUNC_GETPRODUCTBATCHINFO = "getProductBatchInfo";

    public static final Event OPERATORADDED_EVENT = new Event("OperatorAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ADMINADDED_EVENT = new Event("AdminAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected ProductPackerNode(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProductPackerNode(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProductPackerNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProductPackerNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> removeAdmin(Address admin) {
        final Function function = new Function(
                FUNC_REMOVEADMIN, 
                Arrays.<Type>asList(admin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getOperators() {
        final Function function = new Function(FUNC_GETOPERATORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Address>> getAdmins() {
        final Function function = new Function(FUNC_GETADMINS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setPreviousNode(Address _baseNode) {
        final Function function = new Function(
                FUNC_SETPREVIOUSNODE, 
                Arrays.<Type>asList(_baseNode), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> littlepoProductHistory() {
        final Function function = new Function(FUNC_LITTLEPOPRODUCTHISTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(Address newAdmin) {
        final Function function = new Function(
                FUNC_ADDADMIN, 
                Arrays.<Type>asList(newAdmin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setProductStorage(Address _littlepoProductHistory) {
        final Function function = new Function(
                FUNC_SETPRODUCTSTORAGE, 
                Arrays.<Type>asList(_littlepoProductHistory), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addOperator(Address newOperator) {
        final Function function = new Function(
                FUNC_ADDOPERATOR, 
                Arrays.<Type>asList(newOperator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeOperator(Address operator) {
        final Function function = new Function(
                FUNC_REMOVEOPERATOR, 
                Arrays.<Type>asList(operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getProductBatchByBatchNo(Bytes32 _bBatchNo) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHBYBATCHNO, 
                Arrays.<Type>asList(_bBatchNo), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> previousNode() {
        final Function function = new Function(FUNC_PREVIOUSNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<OperatorAddedEventResponse> getOperatorAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATORADDED_EVENT, transactionReceipt);
        ArrayList<OperatorAddedEventResponse> responses = new ArrayList<OperatorAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OperatorAddedEventResponse>() {
            @Override
            public OperatorAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OPERATORADDED_EVENT, log);
                OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OPERATORADDED_EVENT));
        return operatorAddedEventObservable(filter);
    }

    public List<AdminAddedEventResponse> getAdminAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINADDED_EVENT, transactionReceipt);
        ArrayList<AdminAddedEventResponse> responses = new ArrayList<AdminAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AdminAddedEventResponse>() {
            @Override
            public AdminAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINADDED_EVENT, log);
                AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINADDED_EVENT));
        return adminAddedEventObservable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public RemoteCall<Bytes32> getNodeName() {
        final Function function = new Function(FUNC_GETNODENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> createProductBatch(DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_CREATEPRODUCTBATCH, 
                Arrays.<Type>asList(bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTeaBagBatch(Bytes32 _packerBatchQRId, DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_ADDTEABAGBATCH, 
                Arrays.<Type>asList(_packerBatchQRId, bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getProductBatchInfo(Bytes32 _qrCodeId) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHINFO, 
                Arrays.<Type>asList(_qrCodeId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductPackerNode.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductPackerNode.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductPackerNode.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductPackerNode.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static ProductPackerNode load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductPackerNode(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProductPackerNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductPackerNode(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProductPackerNode load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ProductPackerNode(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProductPackerNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProductPackerNode(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OperatorAddedEventResponse {
        public Log log;

        public Address newOperator;

        public Bool isAdd;
    }

    public static class AdminAddedEventResponse {
        public Log log;

        public Address newAdmin;

        public Bool isAdd;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
