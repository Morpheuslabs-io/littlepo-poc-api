package com.littlepo.web3j.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class LittlepoNode extends Contract {
    private static final String BINARY = "0x608060405260008054600160a060020a03191633179055613100806100256000396000f300608060405260043610620000e95763ffffffff60e060020a6000350416631785f53c8114620000ee57806327a099d8146200011457806331ae450b146200017e5780633b86d5ce14620001965780634639b0ae14620001ce57806349334ee514620001e95780635445647d146200020c5780635599e55b146200022757806370480275146200025b5780637a12b9c5146200027f5780638da5cb5b14620002a35780639870d7fe14620002bb578063ac8a584a14620002df578063d977e6be1462000303578063f2fde38b146200031e578063f7aca2cb1462000342578063fffbebdd146200036c575b600080fd5b348015620000fb57600080fd5b5062000112600160a060020a036004351662000384565b005b3480156200012157600080fd5b506200012c620004f8565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200016a57818101518382015260200162000150565b505050509050019250505060405180910390f35b3480156200018b57600080fd5b506200012c6200055d565b348015620001a357600080fd5b50620001ba600160a060020a0360043516620005bf565b604080519115158252519081900360200190f35b348015620001db57600080fd5b50620001ba6004356200061a565b348015620001f657600080fd5b50620001ba600480356024810191013562000a23565b3480156200021957600080fd5b506200012c60043562000e69565b3480156200023457600080fd5b506200023f620014ff565b60408051600160a060020a039092168252519081900360200190f35b3480156200026857600080fd5b5062000112600160a060020a03600435166200150e565b3480156200028c57600080fd5b50620001ba600160a060020a036004351662001607565b348015620002b057600080fd5b506200023f620016c2565b348015620002c857600080fd5b5062000112600160a060020a0360043516620016d1565b348015620002ec57600080fd5b5062000112600160a060020a0360043516620017c8565b3480156200031057600080fd5b506200012c600435620018ed565b3480156200032b57600080fd5b5062000112600160a060020a03600435166200195b565b3480156200034f57600080fd5b506200035a62001981565b60408051918252519081900360200190f35b3480156200037957600080fd5b506200023f620019a5565b60008054600160a060020a031633146200039d57600080fd5b600160a060020a03821660009081526002602052604090205460ff161515620003c557600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b600454811015620004f45781600160a060020a03166004828154811015156200040c57fe5b600091825260209091200154600160a060020a03161415620004eb576004805460001981019081106200043b57fe5b60009182526020909120015460048054600160a060020a0390921691839081106200046257fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600480546000190190620004a0908262001a25565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1620004f4565b600101620003e7565b5050565b606060038054806020026020016040519081016040528092919081815260200182805480156200055257602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162000533575b505050505090505b90565b606060048054806020026020016040519081016040528092919081815260200182805480156200055257602002820191906000526020600020908154600160a060020a0316815260019091019060200180831162000533575050505050905090565b60008054600160a060020a0316331480620005e957503360009081526002602052604090205460ff165b1515620005f557600080fd5b5060088054600160a060020a038316600160a060020a03199091161790556001919050565b60008054819081908190600160a060020a03163314806200064a57503360009081526001602052604090205460ff165b15156200065657600080fd5b600754604080517fa212cc83000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a039092169163a212cc83916024808201926020929091908290030181600087803b158015620006be57600080fd5b505af1158015620006d3573d6000803e3d6000fd5b505050506040513d6020811015620006ea57600080fd5b50519250600160a060020a03831615156200074f576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c696420717220636f64650000000000000000000000000000000000604482015290519081900360640190fd5b600091505b600183600160a060020a0316638c8357366040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200079557600080fd5b505af1158015620007aa573d6000803e3d6000fd5b505050506040513d6020811015620007c157600080fd5b50510382101562000a1857600754604080517f3571ee35000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a039283169263a212cc839290871691633571ee35916024808201926020929091908290030181600087803b1580156200083e57600080fd5b505af115801562000853573d6000803e3d6000fd5b505050506040513d60208110156200086a57600080fd5b50516040805160e060020a63ffffffff851602815260048101929092525160248083019260209291908290030181600087803b158015620008aa57600080fd5b505af1158015620008bf573d6000803e3d6000fd5b505050506040513d6020811015620008d657600080fd5b5051604080517ff78b0be00000000000000000000000000000000000000000000000000000000081529051919250600160a060020a038084169263604080f7927f4c6974746c65706f4e6f646500000000000000000000000000000000000000009288169163f78b0be0916004808201926020929091908290030181600087803b1580156200096457600080fd5b505af115801562000979573d6000803e3d6000fd5b505050506040513d60208110156200099057600080fd5b50516040805160e060020a63ffffffff8616028152600481019390935260248301919091524260448301525160648083019260209291908290030181600087803b158015620009de57600080fd5b505af1158015620009f3573d6000803e3d6000fd5b505050506040513d602081101562000a0a57600080fd5b505060019091019062000754565b506001949350505050565b600080548190600160a060020a031633148062000a4f57503360009081526001602052604090205460ff165b151562000a5b57600080fd5b600754600160a060020a0316151562000abe576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b600b831462000b3d576040805160e560020a62461bcd02815260206004820152602860248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652039000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600060058186868281811062000b4f57fe5b6020908102929092013583525081019190915260400160002054600160a060020a03161462000bc8576040805160e560020a62461bcd02815260206004820152601a60248201527f5061636b61676520697320616c72656164792063726561746564000000000000604482015290519081900360640190fd5b7f4c6974746c65706f4e6f64650000000000000000000000000000000000000000848462000bf562001a51565b83815260406020808301828152918301849052606083019085908502808284378201915050945050505050604051809103906000f08015801562000c3d573d6000803e3d6000fd5b509050806005600083600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000c8457600080fd5b505af115801562000c99573d6000803e3d6000fd5b505050506040513d602081101562000cb057600080fd5b505181526020810191909152604090810160009081208054600160a060020a031916600160a060020a0394851617905560075482517f9870d7fe0000000000000000000000000000000000000000000000000000000081529084166004820152915192841692639870d7fe92602480820193929182900301818387803b15801562000d3a57600080fd5b505af115801562000d4f573d6000803e3d6000fd5b50505050600760009054906101000a9004600160a060020a0316600160a060020a031663c924d9a882600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000db657600080fd5b505af115801562000dcb573d6000803e3d6000fd5b505050506040513d602081101562000de257600080fd5b50516040805160e060020a63ffffffff85160281526004810192909252600160a060020a03851660248301525160448083019260209291908290030181600087803b15801562000e3157600080fd5b505af115801562000e46573d6000803e3d6000fd5b505050506040513d602081101562000e5d57600080fd5b50600195945050505050565b600081815260056020908152604091829020548251600b8082526101808201909452606093600160a060020a039092169284929082016101608038833901905050905081600160a060020a031663073fae836040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000eeb57600080fd5b505af115801562000f00573d6000803e3d6000fd5b505050506040513d602081101562000f1757600080fd5b505181518290600090811062000f2957fe5b6020908102909101810191909152604080517f7f7650eb0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692637f7650eb92600480820193918290030181600087803b15801562000f8f57600080fd5b505af115801562000fa4573d6000803e3d6000fd5b505050506040513d602081101562000fbb57600080fd5b505181518290600190811062000fcd57fe5b6020908102909101810191909152604080517f516f279e0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263516f279e92600480820193918290030181600087803b1580156200103357600080fd5b505af115801562001048573d6000803e3d6000fd5b505050506040513d60208110156200105f57600080fd5b50518151829060029081106200107157fe5b6020908102909101810191909152604080517fc5ce39110000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263c5ce391192600480820193918290030181600087803b158015620010d757600080fd5b505af1158015620010ec573d6000803e3d6000fd5b505050506040513d60208110156200110357600080fd5b50518151829060039081106200111557fe5b6020908102909101810191909152604080517ff0935ec40000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f0935ec492600480820193918290030181600087803b1580156200117b57600080fd5b505af115801562001190573d6000803e3d6000fd5b505050506040513d6020811015620011a757600080fd5b5051815182906004908110620011b957fe5b6020908102909101810191909152604080517f2e943fbd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692632e943fbd92600480820193918290030181600087803b1580156200121f57600080fd5b505af115801562001234573d6000803e3d6000fd5b505050506040513d60208110156200124b57600080fd5b50518151829060059081106200125d57fe5b6020908102909101810191909152604080517f30e4b9110000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926330e4b91192600480820193918290030181600087803b158015620012c357600080fd5b505af1158015620012d8573d6000803e3d6000fd5b505050506040513d6020811015620012ef57600080fd5b50518151829060069081106200130157fe5b6020908102909101810191909152604080517ff4834bbc0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f4834bbc92600480820193918290030181600087803b1580156200136757600080fd5b505af11580156200137c573d6000803e3d6000fd5b505050506040513d60208110156200139357600080fd5b5051815182906007908110620013a557fe5b6020908102909101810191909152604080517f13febc360000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926313febc3692600480820193918290030181600087803b1580156200140b57600080fd5b505af115801562001420573d6000803e3d6000fd5b505050506040513d60208110156200143757600080fd5b50518151829060089081106200144957fe5b6020908102909101810191909152604080517fa1aab33f0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263a1aab33f92600480820193918290030181600087803b158015620014af57600080fd5b505af1158015620014c4573d6000803e3d6000fd5b505050506040513d6020811015620014db57600080fd5b5051815182906009908110620014ed57fe5b60209081029091010152915050919050565b600754600160a060020a031681565b600054600160a060020a031633146200152657600080fd5b600160a060020a03811660009081526002602052604090205460ff16156200154d57600080fd5b6004546014116200155d57600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054600160a060020a0319169091179055565b60008054600160a060020a03163314806200163157503360009081526002602052604090205460ff165b15156200163d57600080fd5b600160a060020a03821615156200169e576040805160e560020a62461bcd02815260206004820152601760248201527f496e76616c69642073746f726167652061646472657373000000000000000000604482015290519081900360640190fd5b60078054600160a060020a031916600160a060020a03939093169290921790915590565b600054600160a060020a031681565b600054600160a060020a03163314620016e957600080fd5b600160a060020a03811660009081526001602052604090205460ff16156200171057600080fd5b6003546014116200172057600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018054600160a060020a0319169091179055565b60008054600160a060020a03163314620017e157600080fd5b600160a060020a03821660009081526001602052604090205460ff1615156200180957600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b600354811015620004f45781600160a060020a03166003828154811015156200185057fe5b600091825260209091200154600160a060020a03161415620018e4576003805460001981019081106200187f57fe5b60009182526020909120015460038054600160a060020a039092169183908110620018a657fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600380546000190190620004a0908262001a25565b6001016200182b565b6000818152600660209081526040918290208054835181840281018401909452808452606093928301828280156200194f57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162001930575b50505050509050919050565b600054600160a060020a031633146200197357600080fd5b6200197e81620019b4565b50565b7f4c6974746c65706f4e6f6465000000000000000000000000000000000000000090565b600854600160a060020a031681565b600160a060020a0381161515620019ca57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b81548183558181111562001a4c5760008381526020902062001a4c91810190830162001a62565b505050565b6040516116518062001a8483390190565b6200055a91905b8082111562001a7f576000815560010162001a69565b509056006080604052606460165560016017556001601b553480156200002057600080fd5b506040516200165138038062001651833981016040528051602082015160008054600160a060020a031916331781556005839055920180519192909182919081106200006857fe5b602090810290910101516006558051819060019081106200008557fe5b60209081029091010151601d55805181906002908110620000a257fe5b60209081029091010151601555805181906003908110620000bf57fe5b60209081029091010151600855805181906004908110620000dc57fe5b60209081029091010151600955805181906005908110620000f957fe5b60209081029091010151600a558051819060069081106200011657fe5b60209081029091010151600c558051819060079081106200013357fe5b60209081029091010151600d558051819060089081106200015057fe5b60209081029091010151600e558051819060099081106200016d57fe5b60209081029091010151600b5580518190600a9081106200018a57fe5b60209081029091010151601c55505042600f81905560105561149f80620001b26000396000f3006080604052600436106101b35763ffffffff60e060020a600035041663073fae8381146101b8578063139d7fed146101df57806313febc36146101f45780631785f53c146102095780631eee993a1461022c57806320982bce1461026157806327a099d8146102795780632e943fbd146102de57806330e4b911146102f357806331ae450b146103085780633571ee351461031d578063516f279e1461033557806354fd4d501461034a578063604080f71461035f578063704802751461037d57806371bc9d9a1461039e5780637f7650eb146103b657806382aefefb146103cb57806383240f83146103e35780638920c339146103fb5780638c835736146104135780638da5cb5b146104285780639870d7fe146104595780639ac80dce1461047a5780639c6f2b251461048f578063a1aab33f14610582578063aa15efc814610597578063ac8a584a146105ac578063b26e642b146105cd578063b2f4bdb0146105e5578063c5ce3911146105fa578063df4857ec1461060f578063f0935ec414610627578063f2fde38b1461063c578063f375d94a1461065d578063f4834bbc14610672578063f78b0be014610687575b600080fd5b3480156101c457600080fd5b506101cd61069c565b60408051918252519081900360200190f35b3480156101eb57600080fd5b506101cd6106a2565b34801561020057600080fd5b506101cd6106a8565b34801561021557600080fd5b5061022a600160a060020a03600435166106ae565b005b34801561023857600080fd5b5061024d600160a060020a0360043516610824565b604080519115158252519081900360200190f35b34801561026d57600080fd5b506101cd600435610a54565b34801561028557600080fd5b5061028e610a73565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102ca5781810151838201526020016102b2565b505050509050019250505060405180910390f35b3480156102ea57600080fd5b506101cd610ad6565b3480156102ff57600080fd5b506101cd610adc565b34801561031457600080fd5b5061028e610ae2565b34801561032957600080fd5b506101cd600435610b42565b34801561034157600080fd5b506101cd610b50565b34801561035657600080fd5b506101cd610b56565b34801561036b57600080fd5b5061024d600435602435604435610b5c565b34801561038957600080fd5b5061022a600160a060020a0360043516610c97565b3480156103aa57600080fd5b5061024d600435610d9a565b3480156103c257600080fd5b506101cd610dd7565b3480156103d757600080fd5b506101cd600435610ddd565b3480156103ef57600080fd5b506101cd600435610deb565b34801561040757600080fd5b506101cd600435610df9565b34801561041f57600080fd5b506101cd610e07565b34801561043457600080fd5b5061043d610e0d565b60408051600160a060020a039092168252519081900360200190f35b34801561046557600080fd5b5061022a600160a060020a0360043516610e1c565b34801561048657600080fd5b506101cd610f1d565b34801561049b57600080fd5b506104a4610f23565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156104ec5781810151838201526020016104d4565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561052b578181015183820152602001610513565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561056a578181015183820152602001610552565b50505050905001965050505050505060405180910390f35b34801561058e57600080fd5b506101cd61103b565b3480156105a357600080fd5b506104a4611041565b3480156105b857600080fd5b5061022a600160a060020a036004351661114e565b3480156105d957600080fd5b5061043d600435611276565b3480156105f157600080fd5b506101cd61129e565b34801561060657600080fd5b506101cd6112a4565b34801561061b57600080fd5b5061024d6004356112aa565b34801561063357600080fd5b506101cd611374565b34801561064857600080fd5b5061022a600160a060020a036004351661137a565b34801561066957600080fd5b506101cd61139d565b34801561067e57600080fd5b506101cd6113a3565b34801561069357600080fd5b506101cd6113a9565b60155481565b60055481565b601d5481565b60008054600160a060020a031633146106c657600080fd5b600160a060020a03821660009081526002602052604090205460ff1615156106ed57600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156108205781600160a060020a031660048281548110151561073257fe5b600091825260209091200154600160a060020a031614156108185760048054600019810190811061075f57fe5b60009182526020909120015460048054600160a060020a03909216918390811061078557fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556004805460001901906107ce908261142c565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1610820565b60010161070f565b5050565b60008054600160a060020a031633148061084d57503360009081526001602052604090205460ff165b151561085857600080fd5b601654601b54106108ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f43616e6e6f7420616464206d6f7265206368696c640000000000000000000000604482015290519081900360640190fd5b81600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561090857600080fd5b505af115801561091c573d6000803e3d6000fd5b505050506040513d602081101561093257600080fd5b5051601b546018805490916000190190811061094a57fe5b90600052602060002001816000191690555081600160a060020a0316637f7650eb6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b505050506040513d60208110156109c457600080fd5b5051601b54601980549091600019019081106109dc57fe5b6000918252602082200191909155601a805460018181018355919092527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e9091018054600160a060020a03851673ffffffffffffffffffffffffffffffffffffffff19909116179055601b8054820190559050919050565b6014805482908110610a6257fe5b600091825260209091200154905081565b60606003805480602002602001604051908101604052809291908181526020018280548015610acb57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610aad575b505050505090505b90565b600c5481565b600d5481565b60606004805480602002602001604051908101604052809291908181526020018280548015610acb57602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610aad575050505050905090565b6018805482908110610a6257fe5b60095481565b60175481565b60008054600160a060020a0316331480610b8557503360009081526001602052604090205460ff165b1515610b9057600080fd5b60008211610bff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420686973746f72792074696d65000000000000000000000000604482015290519081900360640190fd5b506012805460018082019092557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440193909355601380548085019091557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001919091556014805480840182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec015590565b600054600160a060020a03163314610cae57600080fd5b600160a060020a03811660009081526002602052604090205460ff1615610cd457600080fd5b600454601411610ce357600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60008054600160a060020a0316331480610dc357503360009081526001602052604090205460ff165b1515610dce57600080fd5b60119190915590565b60085481565b6019805482908110610a6257fe5b6012805482908110610a6257fe5b6013805482908110610a6257fe5b601b5481565b600054600160a060020a031681565b600054600160a060020a03163314610e3357600080fd5b600160a060020a03811660009081526001602052604090205460ff1615610e5957600080fd5b600354601411610e6857600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60115481565b606080606060186019601a82805480602002602001604051908101604052809291908181526020018280548015610f7a57602002820191906000526020600020905b81548152600190910190602001808311610f65575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015610fcd57602002820191906000526020600020905b81548152600190910190602001808311610fb8575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561102957602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161100b575b50505050509050925092509250909192565b601c5481565b60608060606012601360148280548060200260200160405190810160405280929190818152602001828054801561109857602002820191906000526020600020905b81548152600190910190602001808311611083575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156110eb57602002820191906000526020600020905b815481526001909101906020018083116110d6575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561102957602002820191906000526020600020905b8154815260200190600101908083116111295750505050509050925092509250909192565b60008054600160a060020a0316331461116657600080fd5b600160a060020a03821660009081526001602052604090205460ff16151561118d57600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b6003548110156108205781600160a060020a03166003828154811015156111d257fe5b600091825260209091200154600160a060020a0316141561126e576003805460001981019081106111ff57fe5b60009182526020909120015460038054600160a060020a03909216918390811061122557fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556003805460001901906107ce908261142c565b6001016111af565b601a80548290811061128457fe5b600091825260209091200154600160a060020a0316905081565b600f5481565b600a5481565b600080548190600160a060020a03163314806112d557503360009081526001602052604090205460ff165b15156112e057600080fd5b5060005b60185481101561136e5760188054849190839081106112ff57fe5b60009182526020909120015414156113665760186001601b540381548110151561132557fe5b906000526020600020015460188281548110151561133f57fe5b600091825260209091200155601b546018805490916000190190811061136157fe5b506000525b6001016112e4565b50919050565b600b5481565b600054600160a060020a0316331461139157600080fd5b61139a816113af565b50565b60105481565b600e5481565b60065481565b600160a060020a03811615156113c457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81548183558181111561145057600083815260209020611450918101908301611455565b505050565b610ad391905b8082111561146f576000815560010161145b565b50905600a165627a7a7230582007c4f64f15bf7361e0277fbfb55101cce0de91398018edd87f92498018116c520029a165627a7a72305820b5c54a330f84f79249e9b149643858bc4ae44b0f3c5c5f2b4e857d4061cfdf9d0029";

    public static final String FUNC_REMOVEADMIN = "removeAdmin";

    public static final String FUNC_GETOPERATORS = "getOperators";

    public static final String FUNC_GETADMINS = "getAdmins";

    public static final String FUNC_SETPREVIOUSNODE = "setPreviousNode";

    public static final String FUNC_LITTLEPOPRODUCTHISTORY = "littlepoProductHistory";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_SETPRODUCTSTORAGE = "setProductStorage";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_REMOVEOPERATOR = "removeOperator";

    public static final String FUNC_GETPRODUCTBATCHBYBATCHNO = "getProductBatchByBatchNo";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_PREVIOUSNODE = "previousNode";

    public static final String FUNC_GETNODENAME = "getNodeName";

    public static final String FUNC_CREATEPRODUCTBATCH = "createProductBatch";

    public static final String FUNC_RECEIVEPRODUCTBATCH = "receiveProductBatch";

    public static final String FUNC_GETPRODUCTBATCHINFO = "getProductBatchInfo";

    public static final Event OPERATORADDED_EVENT = new Event("OperatorAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ADMINADDED_EVENT = new Event("AdminAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected LittlepoNode(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LittlepoNode(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LittlepoNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LittlepoNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> removeAdmin(Address admin) {
        final Function function = new Function(
                FUNC_REMOVEADMIN, 
                Arrays.<Type>asList(admin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getOperators() {
        final Function function = new Function(FUNC_GETOPERATORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Address>> getAdmins() {
        final Function function = new Function(FUNC_GETADMINS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setPreviousNode(Address _baseNode) {
        final Function function = new Function(
                FUNC_SETPREVIOUSNODE, 
                Arrays.<Type>asList(_baseNode), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> littlepoProductHistory() {
        final Function function = new Function(FUNC_LITTLEPOPRODUCTHISTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(Address newAdmin) {
        final Function function = new Function(
                FUNC_ADDADMIN, 
                Arrays.<Type>asList(newAdmin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setProductStorage(Address _littlepoProductHistory) {
        final Function function = new Function(
                FUNC_SETPRODUCTSTORAGE, 
                Arrays.<Type>asList(_littlepoProductHistory), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addOperator(Address newOperator) {
        final Function function = new Function(
                FUNC_ADDOPERATOR, 
                Arrays.<Type>asList(newOperator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeOperator(Address operator) {
        final Function function = new Function(
                FUNC_REMOVEOPERATOR, 
                Arrays.<Type>asList(operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getProductBatchByBatchNo(Bytes32 _bBatchNo) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHBYBATCHNO, 
                Arrays.<Type>asList(_bBatchNo), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> previousNode() {
        final Function function = new Function(FUNC_PREVIOUSNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<OperatorAddedEventResponse> getOperatorAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATORADDED_EVENT, transactionReceipt);
        ArrayList<OperatorAddedEventResponse> responses = new ArrayList<OperatorAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OperatorAddedEventResponse>() {
            @Override
            public OperatorAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OPERATORADDED_EVENT, log);
                OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OPERATORADDED_EVENT));
        return operatorAddedEventObservable(filter);
    }

    public List<AdminAddedEventResponse> getAdminAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINADDED_EVENT, transactionReceipt);
        ArrayList<AdminAddedEventResponse> responses = new ArrayList<AdminAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AdminAddedEventResponse>() {
            @Override
            public AdminAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINADDED_EVENT, log);
                AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINADDED_EVENT));
        return adminAddedEventObservable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public RemoteCall<Bytes32> getNodeName() {
        final Function function = new Function(FUNC_GETNODENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> createProductBatch(DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_CREATEPRODUCTBATCH, 
                Arrays.<Type>asList(bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> receiveProductBatch(Bytes32 _qrCodeId) {
        final Function function = new Function(
                FUNC_RECEIVEPRODUCTBATCH, 
                Arrays.<Type>asList(_qrCodeId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getProductBatchInfo(Bytes32 _qrCodeId) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHINFO, 
                Arrays.<Type>asList(_qrCodeId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public static RemoteCall<LittlepoNode> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LittlepoNode.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LittlepoNode> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LittlepoNode.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<LittlepoNode> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LittlepoNode.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LittlepoNode> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LittlepoNode.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static LittlepoNode load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LittlepoNode(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LittlepoNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LittlepoNode(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LittlepoNode load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new LittlepoNode(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LittlepoNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new LittlepoNode(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OperatorAddedEventResponse {
        public Log log;

        public Address newOperator;

        public Bool isAdd;
    }

    public static class AdminAddedEventResponse {
        public Log log;

        public Address newAdmin;

        public Bool isAdd;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
