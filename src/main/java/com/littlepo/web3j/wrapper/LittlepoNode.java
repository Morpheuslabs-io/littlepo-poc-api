package com.littlepo.web3j.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class LittlepoNode extends Contract {
    private static final String BINARY = "0x608060405260008054600160a060020a03191633179055613a85806100256000396000f300608060405260043610620000e95763ffffffff60e060020a6000350416631785f53c8114620000ee57806327a099d8146200011457806331ae450b146200017e5780633b86d5ce146200019657806349334ee514620001ce5780635445647d14620001f15780635599e55b146200020c5780637048027514620002405780637a12b9c514620002645780637e3d6ac514620002885780638da5cb5b14620002e55780639870d7fe14620002fd578063ac8a584a1462000321578063d977e6be1462000345578063f2fde38b1462000360578063f7aca2cb1462000384578063fffbebdd14620003ae575b600080fd5b348015620000fb57600080fd5b5062000112600160a060020a0360043516620003c6565b005b3480156200012157600080fd5b506200012c6200053a565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200016a57818101518382015260200162000150565b505050509050019250505060405180910390f35b3480156200018b57600080fd5b506200012c6200059f565b348015620001a357600080fd5b50620001ba600160a060020a036004351662000601565b604080519115158252519081900360200190f35b348015620001db57600080fd5b50620001ba60048035602481019101356200065c565b348015620001fe57600080fd5b506200012c60043562000a91565b3480156200021957600080fd5b506200022462001127565b60408051600160a060020a039092168252519081900360200190f35b3480156200024d57600080fd5b5062000112600160a060020a036004351662001136565b3480156200027157600080fd5b50620001ba600160a060020a03600435166200122f565b3480156200029557600080fd5b50604080516020600460248035828101358481028087018601909752808652620001ba96843596369660449591949091019291829185019084908082843750949750620012ea9650505050505050565b348015620002f257600080fd5b506200022462002004565b3480156200030a57600080fd5b5062000112600160a060020a036004351662002013565b3480156200032e57600080fd5b5062000112600160a060020a03600435166200210a565b3480156200035257600080fd5b506200012c6004356200222f565b3480156200036d57600080fd5b5062000112600160a060020a03600435166200229d565b3480156200039157600080fd5b506200039c620022c3565b60408051918252519081900360200190f35b348015620003bb57600080fd5b5062000224620022d6565b60008054600160a060020a03163314620003df57600080fd5b600160a060020a03821660009081526002602052604090205460ff1615156200040757600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b600454811015620005365781600160a060020a03166004828154811015156200044e57fe5b600091825260209091200154600160a060020a031614156200052d576004805460001981019081106200047d57fe5b60009182526020909120015460048054600160a060020a039092169183908110620004a457fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600480546000190190620004e2908262002356565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a162000536565b60010162000429565b5050565b606060038054806020026020016040519081016040528092919081815260200182805480156200059457602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162000575575b505050505090505b90565b606060048054806020026020016040519081016040528092919081815260200182805480156200059457602002820191906000526020600020908154600160a060020a0316815260019091019060200180831162000575575050505050905090565b60008054600160a060020a03163314806200062b57503360009081526002602052604090205460ff165b15156200063757600080fd5b5060088054600160a060020a038316600160a060020a03199091161790556001919050565b600080548190600160a060020a03163314806200068857503360009081526001602052604090205460ff165b15156200069457600080fd5b600754600160a060020a03161515620006f7576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b600b831462000776576040805160e560020a62461bcd02815260206004820152602860248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652039000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006005818686828181106200078857fe5b6020908102929092013583525081019190915260400160002054600160a060020a03161462000801576040805160e560020a62461bcd02815260206004820152601a60248201527f5061636b61676520697320616c72656164792063726561746564000000000000604482015290519081900360640190fd5b60008051602062003a3a83398151915284846200081d62002382565b83815260406020808301828152918301849052606083019085908502808284378201915050945050505050604051809103906000f08015801562000865573d6000803e3d6000fd5b509050806005600083600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015620008ac57600080fd5b505af1158015620008c1573d6000803e3d6000fd5b505050506040513d6020811015620008d857600080fd5b505181526020810191909152604090810160009081208054600160a060020a031916600160a060020a0394851617905560075482517f9870d7fe0000000000000000000000000000000000000000000000000000000081529084166004820152915192841692639870d7fe92602480820193929182900301818387803b1580156200096257600080fd5b505af115801562000977573d6000803e3d6000fd5b50505050600760009054906101000a9004600160a060020a0316600160a060020a031663c924d9a882600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015620009de57600080fd5b505af1158015620009f3573d6000803e3d6000fd5b505050506040513d602081101562000a0a57600080fd5b50516040805160e060020a63ffffffff85160281526004810192909252600160a060020a03851660248301525160448083019260209291908290030181600087803b15801562000a5957600080fd5b505af115801562000a6e573d6000803e3d6000fd5b505050506040513d602081101562000a8557600080fd5b50600195945050505050565b600081815260056020908152604091829020548251600b8082526101808201909452606093600160a060020a039092169284929082016101608038833901905050905081600160a060020a031663073fae836040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000b1357600080fd5b505af115801562000b28573d6000803e3d6000fd5b505050506040513d602081101562000b3f57600080fd5b505181518290600090811062000b5157fe5b6020908102909101810191909152604080517f7f7650eb0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692637f7650eb92600480820193918290030181600087803b15801562000bb757600080fd5b505af115801562000bcc573d6000803e3d6000fd5b505050506040513d602081101562000be357600080fd5b505181518290600190811062000bf557fe5b6020908102909101810191909152604080517f516f279e0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263516f279e92600480820193918290030181600087803b15801562000c5b57600080fd5b505af115801562000c70573d6000803e3d6000fd5b505050506040513d602081101562000c8757600080fd5b505181518290600290811062000c9957fe5b6020908102909101810191909152604080517fc5ce39110000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263c5ce391192600480820193918290030181600087803b15801562000cff57600080fd5b505af115801562000d14573d6000803e3d6000fd5b505050506040513d602081101562000d2b57600080fd5b505181518290600390811062000d3d57fe5b6020908102909101810191909152604080517ff0935ec40000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f0935ec492600480820193918290030181600087803b15801562000da357600080fd5b505af115801562000db8573d6000803e3d6000fd5b505050506040513d602081101562000dcf57600080fd5b505181518290600490811062000de157fe5b6020908102909101810191909152604080517f2e943fbd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692632e943fbd92600480820193918290030181600087803b15801562000e4757600080fd5b505af115801562000e5c573d6000803e3d6000fd5b505050506040513d602081101562000e7357600080fd5b505181518290600590811062000e8557fe5b6020908102909101810191909152604080517f30e4b9110000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926330e4b91192600480820193918290030181600087803b15801562000eeb57600080fd5b505af115801562000f00573d6000803e3d6000fd5b505050506040513d602081101562000f1757600080fd5b505181518290600690811062000f2957fe5b6020908102909101810191909152604080517ff4834bbc0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f4834bbc92600480820193918290030181600087803b15801562000f8f57600080fd5b505af115801562000fa4573d6000803e3d6000fd5b505050506040513d602081101562000fbb57600080fd5b505181518290600790811062000fcd57fe5b6020908102909101810191909152604080517f13febc360000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926313febc3692600480820193918290030181600087803b1580156200103357600080fd5b505af115801562001048573d6000803e3d6000fd5b505050506040513d60208110156200105f57600080fd5b50518151829060089081106200107157fe5b6020908102909101810191909152604080517fa1aab33f0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263a1aab33f92600480820193918290030181600087803b158015620010d757600080fd5b505af1158015620010ec573d6000803e3d6000fd5b505050506040513d60208110156200110357600080fd5b50518151829060099081106200111557fe5b60209081029091010152915050919050565b600754600160a060020a031681565b600054600160a060020a031633146200114e57600080fd5b600160a060020a03811660009081526002602052604090205460ff16156200117557600080fd5b6004546014116200118557600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054600160a060020a0319169091179055565b60008054600160a060020a03163314806200125957503360009081526002602052604090205460ff165b15156200126557600080fd5b600160a060020a0382161515620012c6576040805160e560020a62461bcd02815260206004820152601760248201527f496e76616c69642073746f726167652061646472657373000000000000000000604482015290519081900360640190fd5b60078054600160a060020a031916600160a060020a03939093169290921790915590565b6000805481906060908290829082908190600160a060020a03163314806200132157503360009081526001602052604090205460ff165b15156200132d57600080fd5b600754600160a060020a0316151562001390576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b875160041462001410576040805160e560020a62461bcd02815260206004820152602860248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652034000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000600160a060020a0316600560008a60008151811015156200142f57fe5b6020908102909101810151825281019190915260400160002054600160a060020a031614620014a8576040805160e560020a62461bcd02815260206004820152601a60248201527f5061636b61676520697320616c72656164792063726561746564000000000000604482015290519081900360640190fd5b600754604080517fa212cc83000000000000000000000000000000000000000000000000000000008152600481018c90529051600160a060020a039092169163a212cc83916024808201926020929091908290030181600087803b1580156200151057600080fd5b505af115801562001525573d6000803e3d6000fd5b505050506040513d60208110156200153c57600080fd5b50519550600160a060020a0386161515620015a1576040805160e560020a62461bcd02815260206004820152601d60248201527f5061636b6572207061636b61676520646f6573206e6f74206578697374000000604482015290519081900360640190fd5b60408051600b8082526101808201909252906020820161016080388339019050509450876000815181101515620015d457fe5b90602001906020020151856000815181101515620015ee57fe5b6020908102909101810191909152604080517f13febc360000000000000000000000000000000000000000000000000000000081529051600160a060020a038916926313febc3692600480820193918290030181600087803b1580156200165457600080fd5b505af115801562001669573d6000803e3d6000fd5b505050506040513d60208110156200168057600080fd5b50518551869060019081106200169257fe5b6020908102909101810191909152604080517f073fae830000000000000000000000000000000000000000000000000000000081529051600160a060020a0389169263073fae8392600480820193918290030181600087803b158015620016f857600080fd5b505af11580156200170d573d6000803e3d6000fd5b505050506040513d60208110156200172457600080fd5b50518551869060029081106200173657fe5b6020908102909101810191909152604080517f7f7650eb0000000000000000000000000000000000000000000000000000000081529051600160a060020a03891692637f7650eb92600480820193918290030181600087803b1580156200179c57600080fd5b505af1158015620017b1573d6000803e3d6000fd5b505050506040513d6020811015620017c857600080fd5b5051855186906003908110620017da57fe5b60209081029091010152875188906001908110620017f457fe5b906020019060200201518560048151811015156200180e57fe5b6020908102909101810191909152604080517fc5ce39110000000000000000000000000000000000000000000000000000000081529051600160a060020a0389169263c5ce391192600480820193918290030181600087803b1580156200187457600080fd5b505af115801562001889573d6000803e3d6000fd5b505050506040513d6020811015620018a057600080fd5b5051855186906005908110620018b257fe5b6020908102909101810191909152604080517f2e943fbd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03891692632e943fbd92600480820193918290030181600087803b1580156200191857600080fd5b505af11580156200192d573d6000803e3d6000fd5b505050506040513d60208110156200194457600080fd5b50518551869060069081106200195657fe5b6020908102909101810191909152604080517f30e4b9110000000000000000000000000000000000000000000000000000000081529051600160a060020a038916926330e4b91192600480820193918290030181600087803b158015620019bc57600080fd5b505af1158015620019d1573d6000803e3d6000fd5b505050506040513d6020811015620019e857600080fd5b5051855186906007908110620019fa57fe5b6020908102909101810191909152604080517ff4834bbc0000000000000000000000000000000000000000000000000000000081529051600160a060020a0389169263f4834bbc92600480820193918290030181600087803b15801562001a6057600080fd5b505af115801562001a75573d6000803e3d6000fd5b505050506040513d602081101562001a8c57600080fd5b505185518690600890811062001a9e57fe5b6020908102909101015287518890600290811062001ab857fe5b9060200190602002015185600981518110151562001ad257fe5b6020908102909101015287518890600390811062001aec57fe5b9060200190602002015185600a81518110151562001b0657fe5b6020908102909101015260008051602062003a3a8339815191528562001b2b62002382565b8281526040602080830182815284519284019290925283516060840191858101910280838360005b8381101562001b6d57818101518382015260200162001b53565b505050509050019350505050604051809103906000f08015801562001b96573d6000803e3d6000fd5b50600754604080517f9870d7fe000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152905192965090861691639870d7fe9160248082019260009290919082900301818387803b15801562001c0257600080fd5b505af115801562001c17573d6000803e3d6000fd5b50505050600760009054906101000a9004600160a060020a0316600160a060020a031663c924d9a885600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562001c7e57600080fd5b505af115801562001c93573d6000803e3d6000fd5b505050506040513d602081101562001caa57600080fd5b50516040805160e060020a63ffffffff85160281526004810192909252600160a060020a03881660248301525160448083019260209291908290030181600087803b15801562001cf957600080fd5b505af115801562001d0e573d6000803e3d6000fd5b505050506040513d602081101562001d2557600080fd5b5050600754604080517f1c345dec000000000000000000000000000000000000000000000000000000008152600481018c90529051600160a060020a0390921691631c345dec9160248082019260009290919082900301818387803b15801562001d8e57600080fd5b505af115801562001da3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101562001dcd57600080fd5b81019080805164010000000081111562001de657600080fd5b8201602081018481111562001dfa57600080fd5b815185602082028301116401000000008211171562001e1857600080fd5b5090965060009550505050505b825182101562001ff5576007548351600160a060020a039091169063a212cc839085908590811062001e5357fe5b60209081029091018101516040805160e060020a63ffffffff8616028152600481019290925251602480830193928290030181600087803b15801562001e9857600080fd5b505af115801562001ead573d6000803e3d6000fd5b505050506040513d602081101562001ec457600080fd5b5051604080517ff78b0be00000000000000000000000000000000000000000000000000000000081529051919250600160a060020a038084169263604080f79260008051602062003a3a8339815191529289169163f78b0be0916004808201926020929091908290030181600087803b15801562001f4157600080fd5b505af115801562001f56573d6000803e3d6000fd5b505050506040513d602081101562001f6d57600080fd5b50516040805160e060020a63ffffffff8616028152600481019390935260248301919091524260448301525160648083019260209291908290030181600087803b15801562001fbb57600080fd5b505af115801562001fd0573d6000803e3d6000fd5b505050506040513d602081101562001fe757600080fd5b505060019091019062001e25565b50600198975050505050505050565b600054600160a060020a031681565b600054600160a060020a031633146200202b57600080fd5b600160a060020a03811660009081526001602052604090205460ff16156200205257600080fd5b6003546014116200206257600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018054600160a060020a0319169091179055565b60008054600160a060020a031633146200212357600080fd5b600160a060020a03821660009081526001602052604090205460ff1615156200214b57600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b600354811015620005365781600160a060020a03166003828154811015156200219257fe5b600091825260209091200154600160a060020a031614156200222657600380546000198101908110620021c157fe5b60009182526020909120015460038054600160a060020a039092169183908110620021e857fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600380546000190190620004e2908262002356565b6001016200216d565b6000818152600660209081526040918290208054835181840281018401909452808452606093928301828280156200229157602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162002272575b50505050509050919050565b600054600160a060020a03163314620022b557600080fd5b620022c081620022e5565b50565b60008051602062003a3a83398151915290565b600854600160a060020a031681565b600160a060020a0381161515620022fb57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b8154818355818111156200237d576000838152602090206200237d91810190830162002393565b505050565b60405161168580620023b583390190565b6200059c91905b80821115620023b057600081556001016200239a565b509056006080604052606460165560016017556001601b553480156200002057600080fd5b506040516200168538038062001685833981016040528051602082015160008054600160a060020a031916331781556005839055920180519192909182919081106200006857fe5b602090810290910101516006558051819060019081106200008557fe5b60209081029091010151601d55805181906002908110620000a257fe5b60209081029091010151601555805181906003908110620000bf57fe5b60209081029091010151600855805181906004908110620000dc57fe5b60209081029091010151600955805181906005908110620000f957fe5b60209081029091010151600a558051819060069081106200011657fe5b60209081029091010151600c558051819060079081106200013357fe5b60209081029091010151600d558051819060089081106200015057fe5b60209081029091010151600e558051819060099081106200016d57fe5b60209081029091010151600b5580518190600a9081106200018a57fe5b60209081029091010151601c55505042600f8190556010556114d380620001b26000396000f3006080604052600436106101cc5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663073fae8381146101d1578063139d7fed146101f857806313febc361461020d5780631785f53c146102225780631eee993a1461024557806320982bce1461027a57806327a099d8146102925780632e943fbd146102f757806330e4b9111461030c57806331ae450b146103215780633571ee3514610336578063516f279e1461034e57806354fd4d5014610363578063604080f714610378578063704802751461039657806371bc9d9a146103b75780637f7650eb146103cf57806382aefefb146103e457806383240f83146103fc5780638920c339146104145780638c8357361461042c5780638da5cb5b146104415780639870d7fe146104725780639ac80dce146104935780639c6f2b25146104a8578063a1aab33f1461059b578063aa15efc8146105b0578063ac8a584a146105c5578063b26e642b146105e6578063b2f4bdb0146105fe578063c5ce391114610613578063df4857ec14610628578063f0935ec414610640578063f2fde38b14610655578063f375d94a14610676578063f4834bbc1461068b578063f78b0be0146106a0575b600080fd5b3480156101dd57600080fd5b506101e66106b5565b60408051918252519081900360200190f35b34801561020457600080fd5b506101e66106bb565b34801561021957600080fd5b506101e66106c1565b34801561022e57600080fd5b50610243600160a060020a03600435166106c7565b005b34801561025157600080fd5b50610266600160a060020a036004351661083d565b604080519115158252519081900360200190f35b34801561028657600080fd5b506101e6600435610a88565b34801561029e57600080fd5b506102a7610aa7565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102e35781810151838201526020016102cb565b505050509050019250505060405180910390f35b34801561030357600080fd5b506101e6610b0a565b34801561031857600080fd5b506101e6610b10565b34801561032d57600080fd5b506102a7610b16565b34801561034257600080fd5b506101e6600435610b76565b34801561035a57600080fd5b506101e6610b84565b34801561036f57600080fd5b506101e6610b8a565b34801561038457600080fd5b50610266600435602435604435610b90565b3480156103a257600080fd5b50610243600160a060020a0360043516610ccb565b3480156103c357600080fd5b50610266600435610dce565b3480156103db57600080fd5b506101e6610e0b565b3480156103f057600080fd5b506101e6600435610e11565b34801561040857600080fd5b506101e6600435610e1f565b34801561042057600080fd5b506101e6600435610e2d565b34801561043857600080fd5b506101e6610e3b565b34801561044d57600080fd5b50610456610e41565b60408051600160a060020a039092168252519081900360200190f35b34801561047e57600080fd5b50610243600160a060020a0360043516610e50565b34801561049f57600080fd5b506101e6610f51565b3480156104b457600080fd5b506104bd610f57565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156105055781810151838201526020016104ed565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561054457818101518382015260200161052c565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561058357818101518382015260200161056b565b50505050905001965050505050505060405180910390f35b3480156105a757600080fd5b506101e661106f565b3480156105bc57600080fd5b506104bd611075565b3480156105d157600080fd5b50610243600160a060020a0360043516611182565b3480156105f257600080fd5b506104566004356112aa565b34801561060a57600080fd5b506101e66112d2565b34801561061f57600080fd5b506101e66112d8565b34801561063457600080fd5b506102666004356112de565b34801561064c57600080fd5b506101e66113a8565b34801561066157600080fd5b50610243600160a060020a03600435166113ae565b34801561068257600080fd5b506101e66113d1565b34801561069757600080fd5b506101e66113d7565b3480156106ac57600080fd5b506101e66113dd565b60155481565b60055481565b601d5481565b60008054600160a060020a031633146106df57600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561070657600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156108395781600160a060020a031660048281548110151561074b57fe5b600091825260209091200154600160a060020a031614156108315760048054600019810190811061077857fe5b60009182526020909120015460048054600160a060020a03909216918390811061079e57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556004805460001901906107e79082611460565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1610839565b600101610728565b5050565b60008054600160a060020a031633148061086657503360009081526001602052604090205460ff165b151561087157600080fd5b601654601b54106108e357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f43616e6e6f7420616464206d6f7265206368696c640000000000000000000000604482015290519081900360640190fd5b601882600160a060020a031663f78b0be06040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561093c57600080fd5b505af1158015610950573d6000803e3d6000fd5b505050506040513d602081101561096657600080fd5b505181546001810183556000928352602080842090910191909155604080517f7f7650eb0000000000000000000000000000000000000000000000000000000081529051601993600160a060020a03871693637f7650eb936004808201949293918390030190829087803b1580156109dd57600080fd5b505af11580156109f1573d6000803e3d6000fd5b505050506040513d6020811015610a0757600080fd5b505181546001818101845560009384526020842090910191909155601a8054808301825592527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e9091018054600160a060020a03851673ffffffffffffffffffffffffffffffffffffffff19909116179055601b8054820190559050919050565b6014805482908110610a9657fe5b600091825260209091200154905081565b60606003805480602002602001604051908101604052809291908181526020018280548015610aff57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610ae1575b505050505090505b90565b600c5481565b600d5481565b60606004805480602002602001604051908101604052809291908181526020018280548015610aff57602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610ae1575050505050905090565b6018805482908110610a9657fe5b60095481565b60175481565b60008054600160a060020a0316331480610bb957503360009081526001602052604090205460ff165b1515610bc457600080fd5b60008211610c3357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420686973746f72792074696d65000000000000000000000000604482015290519081900360640190fd5b506012805460018082019092557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440193909355601380548085019091557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001919091556014805480840182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec015590565b600054600160a060020a03163314610ce257600080fd5b600160a060020a03811660009081526002602052604090205460ff1615610d0857600080fd5b600454601411610d1757600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60008054600160a060020a0316331480610df757503360009081526001602052604090205460ff165b1515610e0257600080fd5b60119190915590565b60085481565b6019805482908110610a9657fe5b6012805482908110610a9657fe5b6013805482908110610a9657fe5b601b5481565b600054600160a060020a031681565b600054600160a060020a03163314610e6757600080fd5b600160a060020a03811660009081526001602052604090205460ff1615610e8d57600080fd5b600354601411610e9c57600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60115481565b606080606060186019601a82805480602002602001604051908101604052809291908181526020018280548015610fae57602002820191906000526020600020905b81548152600190910190602001808311610f99575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561100157602002820191906000526020600020905b81548152600190910190602001808311610fec575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561105d57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161103f575b50505050509050925092509250909192565b601c5481565b6060806060601260136014828054806020026020016040519081016040528092919081815260200182805480156110cc57602002820191906000526020600020905b815481526001909101906020018083116110b7575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561111f57602002820191906000526020600020905b8154815260019091019060200180831161110a575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561105d57602002820191906000526020600020905b81548152602001906001019080831161115d5750505050509050925092509250909192565b60008054600160a060020a0316331461119a57600080fd5b600160a060020a03821660009081526001602052604090205460ff1615156111c157600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b6003548110156108395781600160a060020a031660038281548110151561120657fe5b600091825260209091200154600160a060020a031614156112a25760038054600019810190811061123357fe5b60009182526020909120015460038054600160a060020a03909216918390811061125957fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556003805460001901906107e79082611460565b6001016111e3565b601a8054829081106112b857fe5b600091825260209091200154600160a060020a0316905081565b600f5481565b600a5481565b600080548190600160a060020a031633148061130957503360009081526001602052604090205460ff165b151561131457600080fd5b5060005b6018548110156113a257601880548491908390811061133357fe5b600091825260209091200154141561139a5760186001601b540381548110151561135957fe5b906000526020600020015460188281548110151561137357fe5b600091825260209091200155601b546018805490916000190190811061139557fe5b506000525b600101611318565b50919050565b600b5481565b600054600160a060020a031633146113c557600080fd5b6113ce816113e3565b50565b60105481565b600e5481565b60065481565b600160a060020a03811615156113f857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81548183558181111561148457600083815260209020611484918101908301611489565b505050565b610b0791905b808211156114a3576000815560010161148f565b50905600a165627a7a723058209f432cef6a0d5cee80f8f96d15d2f0e2b0c2bce3beefc62f84c484179131d08400294c6974746c65706f4e6f64650000000000000000000000000000000000000000a165627a7a72305820562872af33ecc38f29d23ef7bd21c270cdf123cfdb86df9ea277061bb2f8c1dc0029";

    public static final String FUNC_REMOVEADMIN = "removeAdmin";

    public static final String FUNC_GETOPERATORS = "getOperators";

    public static final String FUNC_GETADMINS = "getAdmins";

    public static final String FUNC_SETPREVIOUSNODE = "setPreviousNode";

    public static final String FUNC_LITTLEPOPRODUCTHISTORY = "littlepoProductHistory";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_SETPRODUCTSTORAGE = "setProductStorage";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_REMOVEOPERATOR = "removeOperator";

    public static final String FUNC_GETPRODUCTBATCHBYBATCHNO = "getProductBatchByBatchNo";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_PREVIOUSNODE = "previousNode";

    public static final String FUNC_GETNODENAME = "getNodeName";

    public static final String FUNC_CREATEPRODUCTBATCH = "createProductBatch";

    public static final String FUNC_RECEIVEPRODUCTBATCH = "receiveProductBatch";

    public static final String FUNC_GETPRODUCTBATCHINFO = "getProductBatchInfo";

    public static final Event OPERATORADDED_EVENT = new Event("OperatorAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ADMINADDED_EVENT = new Event("AdminAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected LittlepoNode(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LittlepoNode(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LittlepoNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LittlepoNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> removeAdmin(Address admin) {
        final Function function = new Function(
                FUNC_REMOVEADMIN, 
                Arrays.<Type>asList(admin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getOperators() {
        final Function function = new Function(FUNC_GETOPERATORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Address>> getAdmins() {
        final Function function = new Function(FUNC_GETADMINS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setPreviousNode(Address _baseNode) {
        final Function function = new Function(
                FUNC_SETPREVIOUSNODE, 
                Arrays.<Type>asList(_baseNode), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> littlepoProductHistory() {
        final Function function = new Function(FUNC_LITTLEPOPRODUCTHISTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(Address newAdmin) {
        final Function function = new Function(
                FUNC_ADDADMIN, 
                Arrays.<Type>asList(newAdmin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setProductStorage(Address _littlepoProductHistory) {
        final Function function = new Function(
                FUNC_SETPRODUCTSTORAGE, 
                Arrays.<Type>asList(_littlepoProductHistory), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addOperator(Address newOperator) {
        final Function function = new Function(
                FUNC_ADDOPERATOR, 
                Arrays.<Type>asList(newOperator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeOperator(Address operator) {
        final Function function = new Function(
                FUNC_REMOVEOPERATOR, 
                Arrays.<Type>asList(operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getProductBatchByBatchNo(Bytes32 _bBatchNo) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHBYBATCHNO, 
                Arrays.<Type>asList(_bBatchNo), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> previousNode() {
        final Function function = new Function(FUNC_PREVIOUSNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<OperatorAddedEventResponse> getOperatorAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATORADDED_EVENT, transactionReceipt);
        ArrayList<OperatorAddedEventResponse> responses = new ArrayList<OperatorAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OperatorAddedEventResponse>() {
            @Override
            public OperatorAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OPERATORADDED_EVENT, log);
                OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OPERATORADDED_EVENT));
        return operatorAddedEventObservable(filter);
    }

    public List<AdminAddedEventResponse> getAdminAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINADDED_EVENT, transactionReceipt);
        ArrayList<AdminAddedEventResponse> responses = new ArrayList<AdminAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AdminAddedEventResponse>() {
            @Override
            public AdminAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINADDED_EVENT, log);
                AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINADDED_EVENT));
        return adminAddedEventObservable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public RemoteCall<Bytes32> getNodeName() {
        final Function function = new Function(FUNC_GETNODENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> createProductBatch(DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_CREATEPRODUCTBATCH, 
                Arrays.<Type>asList(bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> receiveProductBatch(Bytes32 _packerQRCodeId, DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_RECEIVEPRODUCTBATCH, 
                Arrays.<Type>asList(_packerQRCodeId, bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getProductBatchInfo(Bytes32 _qrCodeId) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHINFO, 
                Arrays.<Type>asList(_qrCodeId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public static RemoteCall<LittlepoNode> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LittlepoNode.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LittlepoNode> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LittlepoNode.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<LittlepoNode> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LittlepoNode.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LittlepoNode> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LittlepoNode.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static LittlepoNode load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LittlepoNode(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LittlepoNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LittlepoNode(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LittlepoNode load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new LittlepoNode(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LittlepoNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new LittlepoNode(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OperatorAddedEventResponse {
        public Log log;

        public Address newOperator;

        public Bool isAdd;
    }

    public static class AdminAddedEventResponse {
        public Log log;

        public Address newAdmin;

        public Bool isAdd;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
