package com.littlepo.web3j.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class ProductPackerNode extends Contract {
    private static final String BINARY = "0x608060405260008054600160a060020a031916331790556143a0806100256000396000f300608060405260043610620000e95763ffffffff60e060020a6000350416631785f53c8114620000ee57806327a099d8146200011457806331ae450b146200017e5780633b86d5ce146200019657806349334ee514620001ce5780635445647d14620001f15780635599e55b146200020c5780637048027514620002405780637a12b9c514620002645780638ca056b214620002885780638da5cb5b14620002e55780639870d7fe14620002fd578063ac8a584a1462000321578063d977e6be1462000345578063f2fde38b1462000360578063f7aca2cb1462000384578063fffbebdd14620003ae575b600080fd5b348015620000fb57600080fd5b5062000112600160a060020a0360043516620003c6565b005b3480156200012157600080fd5b506200012c6200053a565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200016a57818101518382015260200162000150565b505050509050019250505060405180910390f35b3480156200018b57600080fd5b506200012c6200059f565b348015620001a357600080fd5b50620001ba600160a060020a036004351662000601565b604080519115158252519081900360200190f35b348015620001db57600080fd5b50620001ba60048035602481019101356200065c565b348015620001fe57600080fd5b506200012c60043562000aee565b3480156200021957600080fd5b506200022462001184565b60408051600160a060020a039092168252519081900360200190f35b3480156200024d57600080fd5b5062000112600160a060020a036004351662001193565b3480156200027157600080fd5b50620001ba600160a060020a03600435166200128c565b3480156200029557600080fd5b50604080516020600460248035828101358481028087018601909752808652620001ba96843596369660449591949091019291829185019084908082843750949750620013479650505050505050565b348015620002f257600080fd5b506200022462001a29565b3480156200030a57600080fd5b5062000112600160a060020a036004351662001a38565b3480156200032e57600080fd5b5062000112600160a060020a036004351662001b2f565b3480156200035257600080fd5b506200012c60043562001c54565b3480156200036d57600080fd5b5062000112600160a060020a036004351662001cc2565b3480156200039157600080fd5b506200039c62001ce8565b60408051918252519081900360200190f35b348015620003bb57600080fd5b506200022462001d0c565b60008054600160a060020a03163314620003df57600080fd5b600160a060020a03821660009081526002602052604090205460ff1615156200040757600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b600454811015620005365781600160a060020a03166004828154811015156200044e57fe5b600091825260209091200154600160a060020a031614156200052d576004805460001981019081106200047d57fe5b60009182526020909120015460048054600160a060020a039092169183908110620004a457fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600480546000190190620004e2908262001d8c565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a162000536565b60010162000429565b5050565b606060038054806020026020016040519081016040528092919081815260200182805480156200059457602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162000575575b505050505090505b90565b606060048054806020026020016040519081016040528092919081815260200182805480156200059457602002820191906000526020600020908154600160a060020a0316815260019091019060200180831162000575575050505050905090565b60008054600160a060020a03163314806200062b57503360009081526002602052604090205460ff165b15156200063757600080fd5b5060088054600160a060020a038316600160a060020a03199091161790556001919050565b600080548190600160a060020a03163314806200068857503360009081526001602052604090205460ff165b15156200069457600080fd5b600754600160a060020a03161515620006f7576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b600b831462000776576040805160e560020a62461bcd02815260206004820152602960248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652031310000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006005818686828181106200078857fe5b6020908102929092013583525081019190915260400160002054600160a060020a03161462000801576040805160e560020a62461bcd02815260206004820152601a60248201527f5061636b61676520697320616c72656164792063726561746564000000000000604482015290519081900360640190fd5b7f5061636b65724e6f64650000000000000000000000000000000000000000000084846200082e62001db8565b83815260406020808301828152918301849052606083019085908502808284378201915050945050505050604051809103906000f08015801562000876573d6000803e3d6000fd5b509050806005600083600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015620008bd57600080fd5b505af1158015620008d2573d6000803e3d6000fd5b505050506040513d6020811015620008e957600080fd5b50518152602080820192909252604090810160009081208054600160a060020a031916600160a060020a0395861617905581517f13febc3600000000000000000000000000000000000000000000000000000000815291516006949193918616926313febc3692600480830193919282900301818787803b1580156200096e57600080fd5b505af115801562000983573d6000803e3d6000fd5b505050506040513d60208110156200099a57600080fd5b505181526020808201929092526040908101600090812080546001810182559082529281209092018054600160a060020a031916600160a060020a0385811691821790925560075483517f9870d7fe0000000000000000000000000000000000000000000000000000000081529216600483015291519192639870d7fe9260248084019382900301818387803b15801562000a3457600080fd5b505af115801562000a49573d6000803e3d6000fd5b5050600754604080517fd161b24a000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152915191909216935063d161b24a925060248083019260209291908290030181600087803b15801562000ab657600080fd5b505af115801562000acb573d6000803e3d6000fd5b505050506040513d602081101562000ae257600080fd5b50600195945050505050565b600081815260056020908152604091829020548251600a8082526101608201909452606093600160a060020a039092169284929082016101408038833901905050905081600160a060020a031663073fae836040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000b7057600080fd5b505af115801562000b85573d6000803e3d6000fd5b505050506040513d602081101562000b9c57600080fd5b505181518290600090811062000bae57fe5b6020908102909101810191909152604080517f7f7650eb0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692637f7650eb92600480820193918290030181600087803b15801562000c1457600080fd5b505af115801562000c29573d6000803e3d6000fd5b505050506040513d602081101562000c4057600080fd5b505181518290600190811062000c5257fe5b6020908102909101810191909152604080517f516f279e0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263516f279e92600480820193918290030181600087803b15801562000cb857600080fd5b505af115801562000ccd573d6000803e3d6000fd5b505050506040513d602081101562000ce457600080fd5b505181518290600290811062000cf657fe5b6020908102909101810191909152604080517fc5ce39110000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263c5ce391192600480820193918290030181600087803b15801562000d5c57600080fd5b505af115801562000d71573d6000803e3d6000fd5b505050506040513d602081101562000d8857600080fd5b505181518290600390811062000d9a57fe5b6020908102909101810191909152604080517ff0935ec40000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f0935ec492600480820193918290030181600087803b15801562000e0057600080fd5b505af115801562000e15573d6000803e3d6000fd5b505050506040513d602081101562000e2c57600080fd5b505181518290600490811062000e3e57fe5b6020908102909101810191909152604080517f2e943fbd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692632e943fbd92600480820193918290030181600087803b15801562000ea457600080fd5b505af115801562000eb9573d6000803e3d6000fd5b505050506040513d602081101562000ed057600080fd5b505181518290600590811062000ee257fe5b6020908102909101810191909152604080517f30e4b9110000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926330e4b91192600480820193918290030181600087803b15801562000f4857600080fd5b505af115801562000f5d573d6000803e3d6000fd5b505050506040513d602081101562000f7457600080fd5b505181518290600690811062000f8657fe5b6020908102909101810191909152604080517ff4834bbc0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f4834bbc92600480820193918290030181600087803b15801562000fec57600080fd5b505af115801562001001573d6000803e3d6000fd5b505050506040513d60208110156200101857600080fd5b50518151829060079081106200102a57fe5b6020908102909101810191909152604080517f13febc360000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926313febc3692600480820193918290030181600087803b1580156200109057600080fd5b505af1158015620010a5573d6000803e3d6000fd5b505050506040513d6020811015620010bc57600080fd5b5051815182906008908110620010ce57fe5b6020908102909101810191909152604080517fa1aab33f0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263a1aab33f92600480820193918290030181600087803b1580156200113457600080fd5b505af115801562001149573d6000803e3d6000fd5b505050506040513d60208110156200116057600080fd5b50518151829060099081106200117257fe5b60209081029091010152915050919050565b600754600160a060020a031681565b600054600160a060020a03163314620011ab57600080fd5b600160a060020a03811660009081526002602052604090205460ff1615620011d257600080fd5b600454601411620011e257600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054600160a060020a0319169091179055565b60008054600160a060020a0316331480620012b657503360009081526002602052604090205460ff165b1515620012c257600080fd5b600160a060020a038216151562001323576040805160e560020a62461bcd02815260206004820152601760248201527f496e76616c69642073746f726167652061646472657373000000000000000000604482015290519081900360640190fd5b60078054600160a060020a031916600160a060020a03939093169290921790915590565b6000805481908190600160a060020a03163314806200137557503360009081526001602052604090205460ff165b15156200138157600080fd5b600754600160a060020a03161515620013e4576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b8351600b1462001464576040805160e560020a62461bcd02815260206004820152602960248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652031310000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600085815260056020526040902054600160a060020a03161515620014d3576040805160e560020a62461bcd02815260206004820152601d60248201527f496e76616c6964205061636b6572204261746368207172436f64654964000000604482015290519081900360640190fd5b7f5061636b65724e6f64650000000000000000000000000000000000000000000084620014ff62001dc9565b8281526040602080830182815284519284019290925283516060840191858101910280838360005b838110156200154157818101518382015260200162001527565b505050509050019350505050604051809103906000f0801580156200156a573d6000803e3d6000fd5b509150600860009054906101000a9004600160a060020a0316600160a060020a031663d977e6be83600160a060020a031663073fae836040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015620015d057600080fd5b505af1158015620015e5573d6000803e3d6000fd5b505050506040513d6020811015620015fc57600080fd5b50516040805160e060020a63ffffffff8516028152600481019290925251602480830192600092919082900301818387803b1580156200163b57600080fd5b505af115801562001650573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156200167a57600080fd5b8101908080516401000000008111156200169357600080fd5b82016020810184811115620016a757600080fd5b8151856020820283011164010000000082111715620016c557600080fd5b505080519093506000925082109050620016db57fe5b60209081029091010151600754604080517f9870d7fe000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152905192935090841691639870d7fe9160248082019260009290919082900301818387803b1580156200175057600080fd5b505af115801562001765573d6000803e3d6000fd5b5050505081600160a060020a031663b20d3ef382600160a060020a031663139d7fed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015620017b757600080fd5b505af1158015620017cc573d6000803e3d6000fd5b505050506040513d6020811015620017e357600080fd5b5051604080517fb2f4bdb00000000000000000000000000000000000000000000000000000000081529051600160a060020a0386169163b2f4bdb09160048083019260209291908290030181600087803b1580156200184157600080fd5b505af115801562001856573d6000803e3d6000fd5b505050506040513d60208110156200186d57600080fd5b50516040805160e060020a63ffffffff8616028152600481019390935260248301919091525160448083019260209291908290030181600087803b158015620018b557600080fd5b505af1158015620018ca573d6000803e3d6000fd5b505050506040513d6020811015620018e157600080fd5b5050600754604080517fd161b24a000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163d161b24a9160248083019260209291908290030181600087803b1580156200194c57600080fd5b505af115801562001961573d6000803e3d6000fd5b505050506040513d60208110156200197857600080fd5b505060008581526005602090815260408083205481517f1eee993a000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015292519290911693631eee993a9360248084019491939192918390030190829087803b158015620019f057600080fd5b505af115801562001a05573d6000803e3d6000fd5b505050506040513d602081101562001a1c57600080fd5b5060019695505050505050565b600054600160a060020a031681565b600054600160a060020a0316331462001a5057600080fd5b600160a060020a03811660009081526001602052604090205460ff161562001a7757600080fd5b60035460141162001a8757600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018054600160a060020a0319169091179055565b60008054600160a060020a0316331462001b4857600080fd5b600160a060020a03821660009081526001602052604090205460ff16151562001b7057600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b600354811015620005365781600160a060020a031660038281548110151562001bb757fe5b600091825260209091200154600160a060020a0316141562001c4b5760038054600019810190811062001be657fe5b60009182526020909120015460038054600160a060020a03909216918390811062001c0d57fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600380546000190190620004e2908262001d8c565b60010162001b92565b60008181526006602090815260409182902080548351818402810184019094528084526060939283018282801562001cb657602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162001c97575b50505050509050919050565b600054600160a060020a0316331462001cda57600080fd5b62001ce58162001d1b565b50565b7f5061636b65724e6f64650000000000000000000000000000000000000000000090565b600854600160a060020a031681565b600160a060020a038116151562001d3157600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b81548183558181111562001db35760008381526020902062001db391810190830162001dda565b505050565b60405161162d8062001dfc83390190565b604051610f4c806200342983390190565b6200059c91905b8082111562001df7576000815560010162001de1565b509056006080604052606460155560016016556001601a553480156200002057600080fd5b506040516200162d3803806200162d833981016040528051602082015160008054600160a060020a031916331781556005839055920180519192909182919081106200006857fe5b602090810290910101516006558051819060019081106200008557fe5b60209081029091010151601c55805181906002908110620000a257fe5b60209081029091010151601455805181906003908110620000bf57fe5b60209081029091010151600855805181906004908110620000dc57fe5b60209081029091010151600955805181906005908110620000f957fe5b60209081029091010151600a558051819060069081106200011657fe5b60209081029091010151600c558051819060079081106200013357fe5b60209081029091010151600d558051819060089081106200015057fe5b60209081029091010151600e558051819060099081106200016d57fe5b60209081029091010151600b5580518190600a9081106200018a57fe5b60209081029091010151601b55505042600f81905560105561147b80620001b26000396000f3006080604052600436106101a85763ffffffff60e060020a600035041663073fae8381146101ad578063139d7fed146101d457806313febc36146101e95780631785f53c146101fe5780631eee993a1461022157806320982bce1461025657806327a099d81461026e5780632e943fbd146102d357806330e4b911146102e857806331ae450b146102fd5780633571ee3514610312578063516f279e1461032a57806354fd4d501461033f578063704802751461035457806371bc9d9a146103755780637f7650eb1461038d57806382aefefb146103a257806383240f83146103ba5780638c835736146103d25780638da5cb5b146103e75780639870d7fe146104185780639ac80dce146104395780639c6f2b251461044e578063a1aab33f14610541578063aa15efc814610556578063ac8a584a14610604578063b20d3ef314610625578063b26e642b14610640578063b2f4bdb014610658578063c5ce39111461066d578063df4857ec14610682578063f0935ec41461069a578063f2fde38b146106af578063f375d94a146106d0578063f4834bbc146106e5578063f78b0be0146106fa575b600080fd5b3480156101b957600080fd5b506101c261070f565b60408051918252519081900360200190f35b3480156101e057600080fd5b506101c2610715565b3480156101f557600080fd5b506101c261071b565b34801561020a57600080fd5b5061021f600160a060020a0360043516610721565b005b34801561022d57600080fd5b50610242600160a060020a0360043516610897565b604080519115158252519081900360200190f35b34801561026257600080fd5b506101c2600435610ac7565b34801561027a57600080fd5b50610283610ae6565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102bf5781810151838201526020016102a7565b505050509050019250505060405180910390f35b3480156102df57600080fd5b506101c2610b49565b3480156102f457600080fd5b506101c2610b4f565b34801561030957600080fd5b50610283610b55565b34801561031e57600080fd5b506101c2600435610bb5565b34801561033657600080fd5b506101c2610bc3565b34801561034b57600080fd5b506101c2610bc9565b34801561036057600080fd5b5061021f600160a060020a0360043516610bcf565b34801561038157600080fd5b50610242600435610cd2565b34801561039957600080fd5b506101c2610d0f565b3480156103ae57600080fd5b506101c2600435610d15565b3480156103c657600080fd5b506101c2600435610d23565b3480156103de57600080fd5b506101c2610d31565b3480156103f357600080fd5b506103fc610d37565b60408051600160a060020a039092168252519081900360200190f35b34801561042457600080fd5b5061021f600160a060020a0360043516610d46565b34801561044557600080fd5b506101c2610e47565b34801561045a57600080fd5b50610463610e4d565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156104ab578181015183820152602001610493565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156104ea5781810151838201526020016104d2565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610529578181015183820152602001610511565b50505050905001965050505050505060405180910390f35b34801561054d57600080fd5b506101c2610f65565b34801561056257600080fd5b5061056b610f6b565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156105af578181015183820152602001610597565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105ee5781810151838201526020016105d6565b5050505090500194505050505060405180910390f35b34801561061057600080fd5b5061021f600160a060020a036004351661101f565b34801561063157600080fd5b50610242600435602435611147565b34801561064c57600080fd5b506103fc600435611252565b34801561066457600080fd5b506101c261127a565b34801561067957600080fd5b506101c2611280565b34801561068e57600080fd5b50610242600435611286565b3480156106a657600080fd5b506101c2611350565b3480156106bb57600080fd5b5061021f600160a060020a0360043516611356565b3480156106dc57600080fd5b506101c2611379565b3480156106f157600080fd5b506101c261137f565b34801561070657600080fd5b506101c2611385565b60145481565b60055481565b601c5481565b60008054600160a060020a0316331461073957600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561076057600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156108935781600160a060020a03166004828154811015156107a557fe5b600091825260209091200154600160a060020a0316141561088b576004805460001981019081106107d257fe5b60009182526020909120015460048054600160a060020a0390921691839081106107f857fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556004805460001901906108419082611408565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1610893565b600101610782565b5050565b60008054600160a060020a03163314806108c057503360009081526001602052604090205460ff165b15156108cb57600080fd5b601554601a541061093d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f43616e6e6f7420616464206d6f7265206368696c640000000000000000000000604482015290519081900360640190fd5b81600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561097b57600080fd5b505af115801561098f573d6000803e3d6000fd5b505050506040513d60208110156109a557600080fd5b5051601a54601780549091600019019081106109bd57fe5b90600052602060002001816000191690555081600160a060020a0316637f7650eb6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a0d57600080fd5b505af1158015610a21573d6000803e3d6000fd5b505050506040513d6020811015610a3757600080fd5b5051601a5460188054909160001901908110610a4f57fe5b60009182526020822001919091556019805460018181018355919092527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96959091018054600160a060020a03851673ffffffffffffffffffffffffffffffffffffffff19909116179055601a8054820190559050919050565b6013805482908110610ad557fe5b600091825260209091200154905081565b60606003805480602002602001604051908101604052809291908181526020018280548015610b3e57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610b20575b505050505090505b90565b600c5481565b600d5481565b60606004805480602002602001604051908101604052809291908181526020018280548015610b3e57602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610b20575050505050905090565b6017805482908110610ad557fe5b60095481565b60165481565b600054600160a060020a03163314610be657600080fd5b600160a060020a03811660009081526002602052604090205460ff1615610c0c57600080fd5b600454601411610c1b57600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60008054600160a060020a0316331480610cfb57503360009081526001602052604090205460ff165b1515610d0657600080fd5b60119190915590565b60085481565b6018805482908110610ad557fe5b6012805482908110610ad557fe5b601a5481565b600054600160a060020a031681565b600054600160a060020a03163314610d5d57600080fd5b600160a060020a03811660009081526001602052604090205460ff1615610d8357600080fd5b600354601411610d9257600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60115481565b606080606060176018601982805480602002602001604051908101604052809291908181526020018280548015610ea457602002820191906000526020600020905b81548152600190910190602001808311610e8f575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015610ef757602002820191906000526020600020905b81548152600190910190602001808311610ee2575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610f5357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610f35575b50505050509050925092509250909192565b601b5481565b6060806012601381805480602002602001604051908101604052809291908181526020018280548015610fbe57602002820191906000526020600020905b81548152600190910190602001808311610fa9575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561101057602002820191906000526020600020905b815481526020019060010190808311610ffc575b50505050509050915091509091565b60008054600160a060020a0316331461103757600080fd5b600160a060020a03821660009081526001602052604090205460ff16151561105e57600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b6003548110156108935781600160a060020a03166003828154811015156110a357fe5b600091825260209091200154600160a060020a0316141561113f576003805460001981019081106110d057fe5b60009182526020909120015460038054600160a060020a0390921691839081106110f657fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556003805460001901906108419082611408565b600101611080565b60008054600160a060020a031633148061117057503360009081526001602052604090205460ff165b151561117b57600080fd5b600082116111ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420686973746f72792074696d65000000000000000000000000604482015290519081900360640190fd5b506012805460018082019092557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401929092556013805480840182556000919091527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090015590565b601980548290811061126057fe5b600091825260209091200154600160a060020a0316905081565b600f5481565b600a5481565b600080548190600160a060020a03163314806112b157503360009081526001602052604090205460ff165b15156112bc57600080fd5b5060005b60175481101561134a5760178054849190839081106112db57fe5b60009182526020909120015414156113425760176001601a540381548110151561130157fe5b906000526020600020015460178281548110151561131b57fe5b600091825260209091200155601a546017805490916000190190811061133d57fe5b506000525b6001016112c0565b50919050565b600b5481565b600054600160a060020a0316331461136d57600080fd5b6113768161138b565b50565b60105481565b600e5481565b60065481565b600160a060020a03811615156113a057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81548183558181111561142c5760008381526020902061142c918101908301611431565b505050565b610b4691905b8082111561144b5760008155600101611437565b50905600a165627a7a723058202d0061e833f0bc310bf405be4dbe7ac580d45ab77ce49b6f9a5e53a45a3ac9190029608060405234801561001057600080fd5b50604051610f4c380380610f4c833981016040528051602082015160008054600160a060020a0319163317815560058390559201805191929091829190811061005557fe5b6020908102909101015160065580518190600190811061007157fe5b6020908102909101015160075580518190600290811061008d57fe5b602090810290910101516008558051819060039081106100a957fe5b602090810290910101516009558051819060049081106100c557fe5b60209081029091010151600a558051819060059081106100e157fe5b60209081029091010151600b558051819060069081106100fd57fe5b60209081029091010151600c5580518190600790811061011957fe5b60209081029091010151600d5580518190600890811061013557fe5b60209081029091010151600e55505042600f819055601055610df08061015c6000396000f3006080604052600436106101535763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663073fae838114610158578063139d7fed1461017f5780631785f53c1461019457806320982bce146101b757806327a099d8146101cf5780632e943fbd1461023457806330e4b9111461024957806331ae450b1461025e578063516f279e14610273578063704802751461028857806371bc9d9a146102a95780637f7650eb146102d557806383240f83146102ea5780638da5cb5b146103025780639870d7fe146103335780639ac80dce14610354578063aa15efc814610369578063ac8a584a14610417578063b20d3ef314610438578063b2f4bdb014610453578063c5ce391114610468578063f0935ec41461047d578063f2fde38b14610492578063f375d94a146104b3578063f4834bbc146104c8578063f78b0be0146104dd575b600080fd5b34801561016457600080fd5b5061016d6104f2565b60408051918252519081900360200190f35b34801561018b57600080fd5b5061016d6104f8565b3480156101a057600080fd5b506101b5600160a060020a03600435166104fe565b005b3480156101c357600080fd5b5061016d600435610674565b3480156101db57600080fd5b506101e4610693565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610220578181015183820152602001610208565b505050509050019250505060405180910390f35b34801561024057600080fd5b5061016d6106f6565b34801561025557600080fd5b5061016d6106fc565b34801561026a57600080fd5b506101e4610702565b34801561027f57600080fd5b5061016d610762565b34801561029457600080fd5b506101b5600160a060020a0360043516610768565b3480156102b557600080fd5b506102c160043561086b565b604080519115158252519081900360200190f35b3480156102e157600080fd5b5061016d6108a8565b3480156102f657600080fd5b5061016d6004356108ae565b34801561030e57600080fd5b506103176108bc565b60408051600160a060020a039092168252519081900360200190f35b34801561033f57600080fd5b506101b5600160a060020a03600435166108cb565b34801561036057600080fd5b5061016d6109cc565b34801561037557600080fd5b5061037e6109d2565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156103c25781810151838201526020016103aa565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104015781810151838201526020016103e9565b5050505090500194505050505060405180910390f35b34801561042357600080fd5b506101b5600160a060020a0360043516610a86565b34801561044457600080fd5b506102c1600435602435610bae565b34801561045f57600080fd5b5061016d610cb9565b34801561047457600080fd5b5061016d610cbf565b34801561048957600080fd5b5061016d610cc5565b34801561049e57600080fd5b506101b5600160a060020a0360043516610ccb565b3480156104bf57600080fd5b5061016d610cee565b3480156104d457600080fd5b5061016d610cf4565b3480156104e957600080fd5b5061016d610cfa565b60075481565b60055481565b60008054600160a060020a0316331461051657600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561053d57600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156106705781600160a060020a031660048281548110151561058257fe5b600091825260209091200154600160a060020a03161415610668576004805460001981019081106105af57fe5b60009182526020909120015460048054600160a060020a0390921691839081106105d557fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560048054600019019061061e9082610d7d565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1610670565b60010161055f565b5050565b601380548290811061068257fe5b600091825260209091200154905081565b606060038054806020026020016040519081016040528092919081815260200182805480156106eb57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116106cd575b505050505090505b90565b600c5481565b600d5481565b606060048054806020026020016040519081016040528092919081815260200182805480156106eb57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106cd575050505050905090565b60095481565b600054600160a060020a0316331461077f57600080fd5b600160a060020a03811660009081526002602052604090205460ff16156107a557600080fd5b6004546014116107b457600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60008054600160a060020a031633148061089457503360009081526001602052604090205460ff165b151561089f57600080fd5b60119190915590565b60085481565b601280548290811061068257fe5b600054600160a060020a031681565b600054600160a060020a031633146108e257600080fd5b600160a060020a03811660009081526001602052604090205460ff161561090857600080fd5b60035460141161091757600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60115481565b6060806012601381805480602002602001604051908101604052809291908181526020018280548015610a2557602002820191906000526020600020905b81548152600190910190602001808311610a10575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610a7757602002820191906000526020600020905b815481526020019060010190808311610a63575b50505050509050915091509091565b60008054600160a060020a03163314610a9e57600080fd5b600160a060020a03821660009081526001602052604090205460ff161515610ac557600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b6003548110156106705781600160a060020a0316600382815481101515610b0a57fe5b600091825260209091200154600160a060020a03161415610ba657600380546000198101908110610b3757fe5b60009182526020909120015460038054600160a060020a039092169183908110610b5d57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560038054600019019061061e9082610d7d565b600101610ae7565b60008054600160a060020a0316331480610bd757503360009081526001602052604090205460ff165b1515610be257600080fd5b60008211610c5157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420686973746f72792074696d65000000000000000000000000604482015290519081900360640190fd5b506012805460018082019092557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401929092556013805480840182556000919091527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090015590565b600f5481565b600a5481565b600b5481565b600054600160a060020a03163314610ce257600080fd5b610ceb81610d00565b50565b60105481565b600e5481565b60065481565b600160a060020a0381161515610d1557600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b815481835581811115610da157600083815260209020610da1918101908301610da6565b505050565b6106f391905b80821115610dc05760008155600101610dac565b50905600a165627a7a7230582061880c3a27ba6a5df844bd68cac502d0d072114e8d942c98245e13a3f4c8b17f0029a165627a7a72305820fcec09470072e9f164168a6048770097e9974624a3edf90c75d1ec62eb8506630029";

    public static final String FUNC_REMOVEADMIN = "removeAdmin";

    public static final String FUNC_GETOPERATORS = "getOperators";

    public static final String FUNC_GETADMINS = "getAdmins";

    public static final String FUNC_SETPREVIOUSNODE = "setPreviousNode";

    public static final String FUNC_LITTLEPOPRODUCTHISTORY = "littlepoProductHistory";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_SETPRODUCTSTORAGE = "setProductStorage";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_REMOVEOPERATOR = "removeOperator";

    public static final String FUNC_GETPRODUCTBATCHBYBATCHNO = "getProductBatchByBatchNo";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_PREVIOUSNODE = "previousNode";

    public static final String FUNC_GETNODENAME = "getNodeName";

    public static final String FUNC_CREATEPRODUCTBATCH = "createProductBatch";

    public static final String FUNC_ADDTEABAGBATCH = "addTeaBagBatch";

    public static final String FUNC_GETPRODUCTBATCHINFO = "getProductBatchInfo";

    public static final Event OPERATORADDED_EVENT = new Event("OperatorAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ADMINADDED_EVENT = new Event("AdminAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected ProductPackerNode(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProductPackerNode(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProductPackerNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProductPackerNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> removeAdmin(Address admin) {
        final Function function = new Function(
                FUNC_REMOVEADMIN, 
                Arrays.<Type>asList(admin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getOperators() {
        final Function function = new Function(FUNC_GETOPERATORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Address>> getAdmins() {
        final Function function = new Function(FUNC_GETADMINS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setPreviousNode(Address _baseNode) {
        final Function function = new Function(
                FUNC_SETPREVIOUSNODE, 
                Arrays.<Type>asList(_baseNode), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> littlepoProductHistory() {
        final Function function = new Function(FUNC_LITTLEPOPRODUCTHISTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(Address newAdmin) {
        final Function function = new Function(
                FUNC_ADDADMIN, 
                Arrays.<Type>asList(newAdmin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setProductStorage(Address _littlepoProductHistory) {
        final Function function = new Function(
                FUNC_SETPRODUCTSTORAGE, 
                Arrays.<Type>asList(_littlepoProductHistory), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addOperator(Address newOperator) {
        final Function function = new Function(
                FUNC_ADDOPERATOR, 
                Arrays.<Type>asList(newOperator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeOperator(Address operator) {
        final Function function = new Function(
                FUNC_REMOVEOPERATOR, 
                Arrays.<Type>asList(operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getProductBatchByBatchNo(Bytes32 _bBatchNo) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHBYBATCHNO, 
                Arrays.<Type>asList(_bBatchNo), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> previousNode() {
        final Function function = new Function(FUNC_PREVIOUSNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<OperatorAddedEventResponse> getOperatorAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATORADDED_EVENT, transactionReceipt);
        ArrayList<OperatorAddedEventResponse> responses = new ArrayList<OperatorAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OperatorAddedEventResponse>() {
            @Override
            public OperatorAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OPERATORADDED_EVENT, log);
                OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OPERATORADDED_EVENT));
        return operatorAddedEventObservable(filter);
    }

    public List<AdminAddedEventResponse> getAdminAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINADDED_EVENT, transactionReceipt);
        ArrayList<AdminAddedEventResponse> responses = new ArrayList<AdminAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AdminAddedEventResponse>() {
            @Override
            public AdminAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINADDED_EVENT, log);
                AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINADDED_EVENT));
        return adminAddedEventObservable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public RemoteCall<Bytes32> getNodeName() {
        final Function function = new Function(FUNC_GETNODENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> createProductBatch(DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_CREATEPRODUCTBATCH, 
                Arrays.<Type>asList(bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTeaBagBatch(Bytes32 _packerBatchQRId, DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_ADDTEABAGBATCH, 
                Arrays.<Type>asList(_packerBatchQRId, bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getProductBatchInfo(Bytes32 _qrCodeId) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHINFO, 
                Arrays.<Type>asList(_qrCodeId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductPackerNode.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductPackerNode.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductPackerNode.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductPackerNode.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static ProductPackerNode load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductPackerNode(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProductPackerNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductPackerNode(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProductPackerNode load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ProductPackerNode(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProductPackerNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProductPackerNode(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OperatorAddedEventResponse {
        public Log log;

        public Address newOperator;

        public Bool isAdd;
    }

    public static class AdminAddedEventResponse {
        public Log log;

        public Address newAdmin;

        public Bool isAdd;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
