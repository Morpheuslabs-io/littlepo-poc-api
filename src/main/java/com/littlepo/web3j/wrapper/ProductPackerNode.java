package com.littlepo.web3j.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class ProductPackerNode extends Contract {
    private static final String BINARY = "0x608060405260008054600160a060020a03191633179055614648806100256000396000f300608060405260043610620000e95763ffffffff60e060020a6000350416631785f53c8114620000ee57806327a099d8146200011457806331ae450b146200017e5780633b86d5ce146200019657806349334ee514620001ce5780635445647d14620001f15780635599e55b146200020c5780637048027514620002405780637a12b9c514620002645780638ca056b214620002885780638da5cb5b14620002e55780639870d7fe14620002fd578063ac8a584a1462000321578063d977e6be1462000345578063f2fde38b1462000360578063f7aca2cb1462000384578063fffbebdd14620003ae575b600080fd5b348015620000fb57600080fd5b5062000112600160a060020a0360043516620003c6565b005b3480156200012157600080fd5b506200012c6200053a565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200016a57818101518382015260200162000150565b505050509050019250505060405180910390f35b3480156200018b57600080fd5b506200012c6200059f565b348015620001a357600080fd5b50620001ba600160a060020a036004351662000601565b604080519115158252519081900360200190f35b348015620001db57600080fd5b50620001ba60048035602481019101356200065c565b348015620001fe57600080fd5b506200012c60043562000b63565b3480156200021957600080fd5b5062000224620011f9565b60408051600160a060020a039092168252519081900360200190f35b3480156200024d57600080fd5b5062000112600160a060020a036004351662001208565b3480156200027157600080fd5b50620001ba600160a060020a036004351662001301565b3480156200029557600080fd5b50604080516020600460248035828101358481028087018601909752808652620001ba96843596369660449591949091019291829185019084908082843750949750620013bc9650505050505050565b348015620002f257600080fd5b506200022462001baa565b3480156200030a57600080fd5b5062000112600160a060020a036004351662001bb9565b3480156200032e57600080fd5b5062000112600160a060020a036004351662001cb0565b3480156200035257600080fd5b506200012c60043562001dd5565b3480156200036d57600080fd5b5062000112600160a060020a036004351662001e43565b3480156200039157600080fd5b506200039c62001e69565b60408051918252519081900360200190f35b348015620003bb57600080fd5b506200022462001e8d565b60008054600160a060020a03163314620003df57600080fd5b600160a060020a03821660009081526002602052604090205460ff1615156200040757600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b600454811015620005365781600160a060020a03166004828154811015156200044e57fe5b600091825260209091200154600160a060020a031614156200052d576004805460001981019081106200047d57fe5b60009182526020909120015460048054600160a060020a039092169183908110620004a457fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600480546000190190620004e2908262001f0d565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a162000536565b60010162000429565b5050565b606060038054806020026020016040519081016040528092919081815260200182805480156200059457602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162000575575b505050505090505b90565b606060048054806020026020016040519081016040528092919081815260200182805480156200059457602002820191906000526020600020908154600160a060020a0316815260019091019060200180831162000575575050505050905090565b60008054600160a060020a03163314806200062b57503360009081526002602052604090205460ff165b15156200063757600080fd5b5060088054600160a060020a038316600160a060020a03199091161790556001919050565b600080548190600160a060020a03163314806200068857503360009081526001602052604090205460ff165b15156200069457600080fd5b600754600160a060020a03161515620006f7576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b600b831462000776576040805160e560020a62461bcd02815260206004820152602960248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652031310000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006005818686828181106200078857fe5b6020908102929092013583525081019190915260400160002054600160a060020a03161462000801576040805160e560020a62461bcd02815260206004820152601a60248201527f5061636b61676520697320616c72656164792063726561746564000000000000604482015290519081900360640190fd5b7f5061636b65724e6f64650000000000000000000000000000000000000000000084846200082e62001f39565b83815260406020808301828152918301849052606083019085908502808284378201915050945050505050604051809103906000f08015801562000876573d6000803e3d6000fd5b509050806005600083600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015620008bd57600080fd5b505af1158015620008d2573d6000803e3d6000fd5b505050506040513d6020811015620008e957600080fd5b50518152602080820192909252604090810160009081208054600160a060020a031916600160a060020a0395861617905581517f13febc3600000000000000000000000000000000000000000000000000000000815291516006949193918616926313febc3692600480830193919282900301818787803b1580156200096e57600080fd5b505af115801562000983573d6000803e3d6000fd5b505050506040513d60208110156200099a57600080fd5b505181526020808201929092526040908101600090812080546001810182559082529281209092018054600160a060020a031916600160a060020a0385811691821790925560075483517f9870d7fe0000000000000000000000000000000000000000000000000000000081529216600483015291519192639870d7fe9260248084019382900301818387803b15801562000a3457600080fd5b505af115801562000a49573d6000803e3d6000fd5b50505050600760009054906101000a9004600160a060020a0316600160a060020a031663c924d9a882600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000ab057600080fd5b505af115801562000ac5573d6000803e3d6000fd5b505050506040513d602081101562000adc57600080fd5b50516040805160e060020a63ffffffff85160281526004810192909252600160a060020a03851660248301525160448083019260209291908290030181600087803b15801562000b2b57600080fd5b505af115801562000b40573d6000803e3d6000fd5b505050506040513d602081101562000b5757600080fd5b50600195945050505050565b600081815260056020908152604091829020548251600a8082526101608201909452606093600160a060020a039092169284929082016101408038833901905050905081600160a060020a031663073fae836040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562000be557600080fd5b505af115801562000bfa573d6000803e3d6000fd5b505050506040513d602081101562000c1157600080fd5b505181518290600090811062000c2357fe5b6020908102909101810191909152604080517f7f7650eb0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692637f7650eb92600480820193918290030181600087803b15801562000c8957600080fd5b505af115801562000c9e573d6000803e3d6000fd5b505050506040513d602081101562000cb557600080fd5b505181518290600190811062000cc757fe5b6020908102909101810191909152604080517f516f279e0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263516f279e92600480820193918290030181600087803b15801562000d2d57600080fd5b505af115801562000d42573d6000803e3d6000fd5b505050506040513d602081101562000d5957600080fd5b505181518290600290811062000d6b57fe5b6020908102909101810191909152604080517fc5ce39110000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263c5ce391192600480820193918290030181600087803b15801562000dd157600080fd5b505af115801562000de6573d6000803e3d6000fd5b505050506040513d602081101562000dfd57600080fd5b505181518290600390811062000e0f57fe5b6020908102909101810191909152604080517ff0935ec40000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f0935ec492600480820193918290030181600087803b15801562000e7557600080fd5b505af115801562000e8a573d6000803e3d6000fd5b505050506040513d602081101562000ea157600080fd5b505181518290600490811062000eb357fe5b6020908102909101810191909152604080517f2e943fbd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692632e943fbd92600480820193918290030181600087803b15801562000f1957600080fd5b505af115801562000f2e573d6000803e3d6000fd5b505050506040513d602081101562000f4557600080fd5b505181518290600590811062000f5757fe5b6020908102909101810191909152604080517f30e4b9110000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926330e4b91192600480820193918290030181600087803b15801562000fbd57600080fd5b505af115801562000fd2573d6000803e3d6000fd5b505050506040513d602081101562000fe957600080fd5b505181518290600690811062000ffb57fe5b6020908102909101810191909152604080517ff4834bbc0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f4834bbc92600480820193918290030181600087803b1580156200106157600080fd5b505af115801562001076573d6000803e3d6000fd5b505050506040513d60208110156200108d57600080fd5b50518151829060079081106200109f57fe5b6020908102909101810191909152604080517f13febc360000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926313febc3692600480820193918290030181600087803b1580156200110557600080fd5b505af11580156200111a573d6000803e3d6000fd5b505050506040513d60208110156200113157600080fd5b50518151829060089081106200114357fe5b6020908102909101810191909152604080517fa1aab33f0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263a1aab33f92600480820193918290030181600087803b158015620011a957600080fd5b505af1158015620011be573d6000803e3d6000fd5b505050506040513d6020811015620011d557600080fd5b5051815182906009908110620011e757fe5b60209081029091010152915050919050565b600754600160a060020a031681565b600054600160a060020a031633146200122057600080fd5b600160a060020a03811660009081526002602052604090205460ff16156200124757600080fd5b6004546014116200125757600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054600160a060020a0319169091179055565b60008054600160a060020a03163314806200132b57503360009081526002602052604090205460ff165b15156200133757600080fd5b600160a060020a038216151562001398576040805160e560020a62461bcd02815260206004820152601760248201527f496e76616c69642073746f726167652061646472657373000000000000000000604482015290519081900360640190fd5b60078054600160a060020a031916600160a060020a03939093169290921790915590565b6000805481908190600160a060020a0316331480620013ea57503360009081526001602052604090205460ff165b1515620013f657600080fd5b600754600160a060020a0316151562001459576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b8351600b14620014d9576040805160e560020a62461bcd02815260206004820152602960248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652031310000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600085815260056020526040902054600160a060020a0316151562001548576040805160e560020a62461bcd02815260206004820152601d60248201527f496e76616c6964205061636b6572204261746368207172436f64654964000000604482015290519081900360640190fd5b7f5061636b65724e6f646500000000000000000000000000000000000000000000846200157462001f4a565b8281526040602080830182815284519284019290925283516060840191858101910280838360005b83811015620015b65781810151838201526020016200159c565b505050509050019350505050604051809103906000f080158015620015df573d6000803e3d6000fd5b509150600860009054906101000a9004600160a060020a0316600160a060020a031663d977e6be83600160a060020a031663073fae836040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200164557600080fd5b505af11580156200165a573d6000803e3d6000fd5b505050506040513d60208110156200167157600080fd5b50516040805160e060020a63ffffffff8516028152600481019290925251602480830192600092919082900301818387803b158015620016b057600080fd5b505af1158015620016c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015620016ef57600080fd5b8101908080516401000000008111156200170857600080fd5b820160208101848111156200171c57600080fd5b81518560208202830111640100000000821117156200173a57600080fd5b5050805190935060009250821090506200175057fe5b60209081029091010151600754604080517f9870d7fe000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152905192935090841691639870d7fe9160248082019260009290919082900301818387803b158015620017c557600080fd5b505af1158015620017da573d6000803e3d6000fd5b5050505081600160a060020a031663604080f782600160a060020a031663139d7fed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200182c57600080fd5b505af115801562001841573d6000803e3d6000fd5b505050506040513d60208110156200185857600080fd5b5051604080517ff78b0be00000000000000000000000000000000000000000000000000000000081529051600160a060020a0386169163f78b0be09160048083019260209291908290030181600087803b158015620018b657600080fd5b505af1158015620018cb573d6000803e3d6000fd5b505050506040513d6020811015620018e257600080fd5b5051604080517fb2f4bdb00000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163b2f4bdb09160048083019260209291908290030181600087803b1580156200194057600080fd5b505af115801562001955573d6000803e3d6000fd5b505050506040513d60208110156200196c57600080fd5b50516040805160e060020a63ffffffff87160281526004810194909452602484019290925260448301525160648083019260209291908290030181600087803b158015620019b957600080fd5b505af1158015620019ce573d6000803e3d6000fd5b505050506040513d6020811015620019e557600080fd5b5050600754604080517ff78b0be00000000000000000000000000000000000000000000000000000000081529051600160a060020a039283169263c924d9a8929085169163f78b0be0916004808201926020929091908290030181600087803b15801562001a5257600080fd5b505af115801562001a67573d6000803e3d6000fd5b505050506040513d602081101562001a7e57600080fd5b50516040805160e060020a63ffffffff85160281526004810192909252600160a060020a03861660248301525160448083019260209291908290030181600087803b15801562001acd57600080fd5b505af115801562001ae2573d6000803e3d6000fd5b505050506040513d602081101562001af957600080fd5b505060008581526005602090815260408083205481517f1eee993a000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015292519290911693631eee993a9360248084019491939192918390030190829087803b15801562001b7157600080fd5b505af115801562001b86573d6000803e3d6000fd5b505050506040513d602081101562001b9d57600080fd5b5060019695505050505050565b600054600160a060020a031681565b600054600160a060020a0316331462001bd157600080fd5b600160a060020a03811660009081526001602052604090205460ff161562001bf857600080fd5b60035460141162001c0857600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018054600160a060020a0319169091179055565b60008054600160a060020a0316331462001cc957600080fd5b600160a060020a03821660009081526001602052604090205460ff16151562001cf157600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b600354811015620005365781600160a060020a031660038281548110151562001d3857fe5b600091825260209091200154600160a060020a0316141562001dcc5760038054600019810190811062001d6757fe5b60009182526020909120015460038054600160a060020a03909216918390811062001d8e57fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600380546000190190620004e2908262001f0d565b60010162001d13565b60008181526006602090815260409182902080548351818402810184019094528084526060939283018282801562001e3757602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162001e18575b50505050509050919050565b600054600160a060020a0316331462001e5b57600080fd5b62001e668162001e9c565b50565b7f5061636b65724e6f64650000000000000000000000000000000000000000000090565b600854600160a060020a031681565b600160a060020a038116151562001eb257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b81548183558181111562001f345760008381526020902062001f3491810190830162001f5b565b505050565b6040516116518062001f7d83390190565b60405161104f80620035ce83390190565b6200059c91905b8082111562001f78576000815560010162001f62565b509056006080604052606460165560016017556001601b553480156200002057600080fd5b506040516200165138038062001651833981016040528051602082015160008054600160a060020a031916331781556005839055920180519192909182919081106200006857fe5b602090810290910101516006558051819060019081106200008557fe5b60209081029091010151601d55805181906002908110620000a257fe5b60209081029091010151601555805181906003908110620000bf57fe5b60209081029091010151600855805181906004908110620000dc57fe5b60209081029091010151600955805181906005908110620000f957fe5b60209081029091010151600a558051819060069081106200011657fe5b60209081029091010151600c558051819060079081106200013357fe5b60209081029091010151600d558051819060089081106200015057fe5b60209081029091010151600e558051819060099081106200016d57fe5b60209081029091010151600b5580518190600a9081106200018a57fe5b60209081029091010151601c55505042600f81905560105561149f80620001b26000396000f3006080604052600436106101b35763ffffffff60e060020a600035041663073fae8381146101b8578063139d7fed146101df57806313febc36146101f45780631785f53c146102095780631eee993a1461022c57806320982bce1461026157806327a099d8146102795780632e943fbd146102de57806330e4b911146102f357806331ae450b146103085780633571ee351461031d578063516f279e1461033557806354fd4d501461034a578063604080f71461035f578063704802751461037d57806371bc9d9a1461039e5780637f7650eb146103b657806382aefefb146103cb57806383240f83146103e35780638920c339146103fb5780638c835736146104135780638da5cb5b146104285780639870d7fe146104595780639ac80dce1461047a5780639c6f2b251461048f578063a1aab33f14610582578063aa15efc814610597578063ac8a584a146105ac578063b26e642b146105cd578063b2f4bdb0146105e5578063c5ce3911146105fa578063df4857ec1461060f578063f0935ec414610627578063f2fde38b1461063c578063f375d94a1461065d578063f4834bbc14610672578063f78b0be014610687575b600080fd5b3480156101c457600080fd5b506101cd61069c565b60408051918252519081900360200190f35b3480156101eb57600080fd5b506101cd6106a2565b34801561020057600080fd5b506101cd6106a8565b34801561021557600080fd5b5061022a600160a060020a03600435166106ae565b005b34801561023857600080fd5b5061024d600160a060020a0360043516610824565b604080519115158252519081900360200190f35b34801561026d57600080fd5b506101cd600435610a54565b34801561028557600080fd5b5061028e610a73565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102ca5781810151838201526020016102b2565b505050509050019250505060405180910390f35b3480156102ea57600080fd5b506101cd610ad6565b3480156102ff57600080fd5b506101cd610adc565b34801561031457600080fd5b5061028e610ae2565b34801561032957600080fd5b506101cd600435610b42565b34801561034157600080fd5b506101cd610b50565b34801561035657600080fd5b506101cd610b56565b34801561036b57600080fd5b5061024d600435602435604435610b5c565b34801561038957600080fd5b5061022a600160a060020a0360043516610c97565b3480156103aa57600080fd5b5061024d600435610d9a565b3480156103c257600080fd5b506101cd610dd7565b3480156103d757600080fd5b506101cd600435610ddd565b3480156103ef57600080fd5b506101cd600435610deb565b34801561040757600080fd5b506101cd600435610df9565b34801561041f57600080fd5b506101cd610e07565b34801561043457600080fd5b5061043d610e0d565b60408051600160a060020a039092168252519081900360200190f35b34801561046557600080fd5b5061022a600160a060020a0360043516610e1c565b34801561048657600080fd5b506101cd610f1d565b34801561049b57600080fd5b506104a4610f23565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156104ec5781810151838201526020016104d4565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561052b578181015183820152602001610513565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561056a578181015183820152602001610552565b50505050905001965050505050505060405180910390f35b34801561058e57600080fd5b506101cd61103b565b3480156105a357600080fd5b506104a4611041565b3480156105b857600080fd5b5061022a600160a060020a036004351661114e565b3480156105d957600080fd5b5061043d600435611276565b3480156105f157600080fd5b506101cd61129e565b34801561060657600080fd5b506101cd6112a4565b34801561061b57600080fd5b5061024d6004356112aa565b34801561063357600080fd5b506101cd611374565b34801561064857600080fd5b5061022a600160a060020a036004351661137a565b34801561066957600080fd5b506101cd61139d565b34801561067e57600080fd5b506101cd6113a3565b34801561069357600080fd5b506101cd6113a9565b60155481565b60055481565b601d5481565b60008054600160a060020a031633146106c657600080fd5b600160a060020a03821660009081526002602052604090205460ff1615156106ed57600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156108205781600160a060020a031660048281548110151561073257fe5b600091825260209091200154600160a060020a031614156108185760048054600019810190811061075f57fe5b60009182526020909120015460048054600160a060020a03909216918390811061078557fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556004805460001901906107ce908261142c565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1610820565b60010161070f565b5050565b60008054600160a060020a031633148061084d57503360009081526001602052604090205460ff165b151561085857600080fd5b601654601b54106108ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f43616e6e6f7420616464206d6f7265206368696c640000000000000000000000604482015290519081900360640190fd5b81600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561090857600080fd5b505af115801561091c573d6000803e3d6000fd5b505050506040513d602081101561093257600080fd5b5051601b546018805490916000190190811061094a57fe5b90600052602060002001816000191690555081600160a060020a0316637f7650eb6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b505050506040513d60208110156109c457600080fd5b5051601b54601980549091600019019081106109dc57fe5b6000918252602082200191909155601a805460018181018355919092527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e9091018054600160a060020a03851673ffffffffffffffffffffffffffffffffffffffff19909116179055601b8054820190559050919050565b6014805482908110610a6257fe5b600091825260209091200154905081565b60606003805480602002602001604051908101604052809291908181526020018280548015610acb57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610aad575b505050505090505b90565b600c5481565b600d5481565b60606004805480602002602001604051908101604052809291908181526020018280548015610acb57602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610aad575050505050905090565b6018805482908110610a6257fe5b60095481565b60175481565b60008054600160a060020a0316331480610b8557503360009081526001602052604090205460ff165b1515610b9057600080fd5b60008211610bff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420686973746f72792074696d65000000000000000000000000604482015290519081900360640190fd5b506012805460018082019092557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440193909355601380548085019091557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001919091556014805480840182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec015590565b600054600160a060020a03163314610cae57600080fd5b600160a060020a03811660009081526002602052604090205460ff1615610cd457600080fd5b600454601411610ce357600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60008054600160a060020a0316331480610dc357503360009081526001602052604090205460ff165b1515610dce57600080fd5b60119190915590565b60085481565b6019805482908110610a6257fe5b6012805482908110610a6257fe5b6013805482908110610a6257fe5b601b5481565b600054600160a060020a031681565b600054600160a060020a03163314610e3357600080fd5b600160a060020a03811660009081526001602052604090205460ff1615610e5957600080fd5b600354601411610e6857600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60115481565b606080606060186019601a82805480602002602001604051908101604052809291908181526020018280548015610f7a57602002820191906000526020600020905b81548152600190910190602001808311610f65575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015610fcd57602002820191906000526020600020905b81548152600190910190602001808311610fb8575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561102957602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161100b575b50505050509050925092509250909192565b601c5481565b60608060606012601360148280548060200260200160405190810160405280929190818152602001828054801561109857602002820191906000526020600020905b81548152600190910190602001808311611083575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156110eb57602002820191906000526020600020905b815481526001909101906020018083116110d6575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561102957602002820191906000526020600020905b8154815260200190600101908083116111295750505050509050925092509250909192565b60008054600160a060020a0316331461116657600080fd5b600160a060020a03821660009081526001602052604090205460ff16151561118d57600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b6003548110156108205781600160a060020a03166003828154811015156111d257fe5b600091825260209091200154600160a060020a0316141561126e576003805460001981019081106111ff57fe5b60009182526020909120015460038054600160a060020a03909216918390811061122557fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556003805460001901906107ce908261142c565b6001016111af565b601a80548290811061128457fe5b600091825260209091200154600160a060020a0316905081565b600f5481565b600a5481565b600080548190600160a060020a03163314806112d557503360009081526001602052604090205460ff165b15156112e057600080fd5b5060005b60185481101561136e5760188054849190839081106112ff57fe5b60009182526020909120015414156113665760186001601b540381548110151561132557fe5b906000526020600020015460188281548110151561133f57fe5b600091825260209091200155601b546018805490916000190190811061136157fe5b506000525b6001016112e4565b50919050565b600b5481565b600054600160a060020a0316331461139157600080fd5b61139a816113af565b50565b60105481565b600e5481565b60065481565b600160a060020a03811615156113c457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81548183558181111561145057600083815260209020611450918101908301611455565b505050565b610ad391905b8082111561146f576000815560010161145b565b50905600a165627a7a72305820914bc1c11cbc547162a15e5fd10288a5c9bd8205637a08af2e9f54640e15502a0029608060405234801561001057600080fd5b5060405161104f38038061104f833981016040528051602082015160008054600160a060020a0319163317815560058390559201805191929091829190811061005557fe5b6020908102909101015160065580518190600190811061007157fe5b6020908102909101015160075580518190600290811061008d57fe5b602090810290910101516008558051819060039081106100a957fe5b602090810290910101516009558051819060049081106100c557fe5b60209081029091010151600a558051819060059081106100e157fe5b60209081029091010151600b558051819060069081106100fd57fe5b60209081029091010151600c5580518190600790811061011957fe5b60209081029091010151600d5580518190600890811061013557fe5b60209081029091010151600e55505042600f819055601055610ef38061015c6000396000f30060806040526004361061015e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663073fae838114610163578063139d7fed1461018a5780631785f53c1461019f57806320982bce146101c257806327a099d8146101da5780632e943fbd1461023f57806330e4b9111461025457806331ae450b14610269578063516f279e1461027e578063604080f71461029357806370480275146102c557806371bc9d9a146102e65780637f7650eb146102fe57806383240f83146103135780638920c3391461032b5780638da5cb5b146103435780639870d7fe146103745780639ac80dce14610395578063aa15efc8146103aa578063ac8a584a1461049d578063b2f4bdb0146104be578063c5ce3911146104d3578063f0935ec4146104e8578063f2fde38b146104fd578063f375d94a1461051e578063f4834bbc14610533578063f78b0be014610548575b600080fd5b34801561016f57600080fd5b5061017861055d565b60408051918252519081900360200190f35b34801561019657600080fd5b50610178610563565b3480156101ab57600080fd5b506101c0600160a060020a0360043516610569565b005b3480156101ce57600080fd5b506101786004356106df565b3480156101e657600080fd5b506101ef6106fe565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561022b578181015183820152602001610213565b505050509050019250505060405180910390f35b34801561024b57600080fd5b50610178610761565b34801561026057600080fd5b50610178610767565b34801561027557600080fd5b506101ef61076d565b34801561028a57600080fd5b506101786107cd565b34801561029f57600080fd5b506102b16004356024356044356107d3565b604080519115158252519081900360200190f35b3480156102d157600080fd5b506101c0600160a060020a036004351661090e565b3480156102f257600080fd5b506102b1600435610a11565b34801561030a57600080fd5b50610178610a4e565b34801561031f57600080fd5b50610178600435610a54565b34801561033757600080fd5b50610178600435610a62565b34801561034f57600080fd5b50610358610a70565b60408051600160a060020a039092168252519081900360200190f35b34801561038057600080fd5b506101c0600160a060020a0360043516610a7f565b3480156103a157600080fd5b50610178610b80565b3480156103b657600080fd5b506103bf610b86565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156104075781810151838201526020016103ef565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561044657818101518382015260200161042e565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561048557818101518382015260200161046d565b50505050905001965050505050505060405180910390f35b3480156104a957600080fd5b506101c0600160a060020a0360043516610c94565b3480156104ca57600080fd5b50610178610dbc565b3480156104df57600080fd5b50610178610dc2565b3480156104f457600080fd5b50610178610dc8565b34801561050957600080fd5b506101c0600160a060020a0360043516610dce565b34801561052a57600080fd5b50610178610df1565b34801561053f57600080fd5b50610178610df7565b34801561055457600080fd5b50610178610dfd565b60075481565b60055481565b60008054600160a060020a0316331461058157600080fd5b600160a060020a03821660009081526002602052604090205460ff1615156105a857600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156106db5781600160a060020a03166004828154811015156105ed57fe5b600091825260209091200154600160a060020a031614156106d35760048054600019810190811061061a57fe5b60009182526020909120015460048054600160a060020a03909216918390811061064057fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556004805460001901906106899082610e80565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a16106db565b6001016105ca565b5050565b60148054829081106106ed57fe5b600091825260209091200154905081565b6060600380548060200260200160405190810160405280929190818152602001828054801561075657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610738575b505050505090505b90565b600c5481565b600d5481565b6060600480548060200260200160405190810160405280929190818152602001828054801561075657602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610738575050505050905090565b60095481565b60008054600160a060020a03163314806107fc57503360009081526001602052604090205460ff165b151561080757600080fd5b6000821161087657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420686973746f72792074696d65000000000000000000000000604482015290519081900360640190fd5b506012805460018082019092557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440193909355601380548085019091557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001919091556014805480840182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec015590565b600054600160a060020a0316331461092557600080fd5b600160a060020a03811660009081526002602052604090205460ff161561094b57600080fd5b60045460141161095a57600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60008054600160a060020a0316331480610a3a57503360009081526001602052604090205460ff165b1515610a4557600080fd5b60119190915590565b60085481565b60128054829081106106ed57fe5b60138054829081106106ed57fe5b600054600160a060020a031681565b600054600160a060020a03163314610a9657600080fd5b600160a060020a03811660009081526001602052604090205460ff1615610abc57600080fd5b600354601411610acb57600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60115481565b606080606060126013601482805480602002602001604051908101604052809291908181526020018280548015610bdd57602002820191906000526020600020905b81548152600190910190602001808311610bc8575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015610c3057602002820191906000526020600020905b81548152600190910190602001808311610c1b575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610c8257602002820191906000526020600020905b815481526020019060010190808311610c6e575b50505050509050925092509250909192565b60008054600160a060020a03163314610cac57600080fd5b600160a060020a03821660009081526001602052604090205460ff161515610cd357600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b6003548110156106db5781600160a060020a0316600382815481101515610d1857fe5b600091825260209091200154600160a060020a03161415610db457600380546000198101908110610d4557fe5b60009182526020909120015460038054600160a060020a039092169183908110610d6b57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556003805460001901906106899082610e80565b600101610cf5565b600f5481565b600a5481565b600b5481565b600054600160a060020a03163314610de557600080fd5b610dee81610e03565b50565b60105481565b600e5481565b60065481565b600160a060020a0381161515610e1857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b815481835581811115610ea457600083815260209020610ea4918101908301610ea9565b505050565b61075e91905b80821115610ec35760008155600101610eaf565b50905600a165627a7a723058202872c953ae7a8a76b9cb916fe1695556dcfd1e923b311cc95ef8c9c7e82a75390029a165627a7a72305820b698c820dceea01c2c269fa91f34a64a8b72e16274b654189067a6e56acbbecb0029";

    public static final String FUNC_REMOVEADMIN = "removeAdmin";

    public static final String FUNC_GETOPERATORS = "getOperators";

    public static final String FUNC_GETADMINS = "getAdmins";

    public static final String FUNC_SETPREVIOUSNODE = "setPreviousNode";

    public static final String FUNC_LITTLEPOPRODUCTHISTORY = "littlepoProductHistory";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_SETPRODUCTSTORAGE = "setProductStorage";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_REMOVEOPERATOR = "removeOperator";

    public static final String FUNC_GETPRODUCTBATCHBYBATCHNO = "getProductBatchByBatchNo";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_PREVIOUSNODE = "previousNode";

    public static final String FUNC_GETNODENAME = "getNodeName";

    public static final String FUNC_CREATEPRODUCTBATCH = "createProductBatch";

    public static final String FUNC_ADDTEABAGBATCH = "addTeaBagBatch";

    public static final String FUNC_GETPRODUCTBATCHINFO = "getProductBatchInfo";

    public static final Event OPERATORADDED_EVENT = new Event("OperatorAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ADMINADDED_EVENT = new Event("AdminAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected ProductPackerNode(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProductPackerNode(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProductPackerNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProductPackerNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> removeAdmin(Address admin) {
        final Function function = new Function(
                FUNC_REMOVEADMIN, 
                Arrays.<Type>asList(admin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getOperators() {
        final Function function = new Function(FUNC_GETOPERATORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Address>> getAdmins() {
        final Function function = new Function(FUNC_GETADMINS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setPreviousNode(Address _baseNode) {
        final Function function = new Function(
                FUNC_SETPREVIOUSNODE, 
                Arrays.<Type>asList(_baseNode), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> littlepoProductHistory() {
        final Function function = new Function(FUNC_LITTLEPOPRODUCTHISTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(Address newAdmin) {
        final Function function = new Function(
                FUNC_ADDADMIN, 
                Arrays.<Type>asList(newAdmin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setProductStorage(Address _littlepoProductHistory) {
        final Function function = new Function(
                FUNC_SETPRODUCTSTORAGE, 
                Arrays.<Type>asList(_littlepoProductHistory), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addOperator(Address newOperator) {
        final Function function = new Function(
                FUNC_ADDOPERATOR, 
                Arrays.<Type>asList(newOperator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeOperator(Address operator) {
        final Function function = new Function(
                FUNC_REMOVEOPERATOR, 
                Arrays.<Type>asList(operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getProductBatchByBatchNo(Bytes32 _bBatchNo) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHBYBATCHNO, 
                Arrays.<Type>asList(_bBatchNo), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> previousNode() {
        final Function function = new Function(FUNC_PREVIOUSNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<OperatorAddedEventResponse> getOperatorAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATORADDED_EVENT, transactionReceipt);
        ArrayList<OperatorAddedEventResponse> responses = new ArrayList<OperatorAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OperatorAddedEventResponse>() {
            @Override
            public OperatorAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OPERATORADDED_EVENT, log);
                OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OPERATORADDED_EVENT));
        return operatorAddedEventObservable(filter);
    }

    public List<AdminAddedEventResponse> getAdminAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINADDED_EVENT, transactionReceipt);
        ArrayList<AdminAddedEventResponse> responses = new ArrayList<AdminAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AdminAddedEventResponse>() {
            @Override
            public AdminAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINADDED_EVENT, log);
                AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINADDED_EVENT));
        return adminAddedEventObservable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public RemoteCall<Bytes32> getNodeName() {
        final Function function = new Function(FUNC_GETNODENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> createProductBatch(DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_CREATEPRODUCTBATCH, 
                Arrays.<Type>asList(bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTeaBagBatch(Bytes32 _packerBatchQRId, DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_ADDTEABAGBATCH, 
                Arrays.<Type>asList(_packerBatchQRId, bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getProductBatchInfo(Bytes32 _qrCodeId) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHINFO, 
                Arrays.<Type>asList(_qrCodeId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductPackerNode.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductPackerNode.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductPackerNode.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProductPackerNode> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductPackerNode.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static ProductPackerNode load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductPackerNode(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProductPackerNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductPackerNode(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProductPackerNode load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ProductPackerNode(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProductPackerNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProductPackerNode(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OperatorAddedEventResponse {
        public Log log;

        public Address newOperator;

        public Bool isAdd;
    }

    public static class AdminAddedEventResponse {
        public Log log;

        public Address newAdmin;

        public Bool isAdd;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
