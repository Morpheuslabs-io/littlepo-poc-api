package com.littlepo.web3j.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class ProductHarvesterNode extends Contract {
    private static final String BINARY = "0x608060405260008054600160a060020a03191633179055612b0c806100256000396000f3006080604052600436106100cc5763ffffffff60e060020a6000350416631785f53c81146100d157806327a099d8146100f457806331ae450b146101595780633b86d5ce1461016e57806349334ee5146101a35780635445647d146101c35780635599e55b146101db578063704802751461020c5780637a12b9c51461022d5780638da5cb5b1461024e5780639870d7fe14610263578063ac8a584a14610284578063d977e6be146102a5578063f2fde38b146102bd578063f7aca2cb146102de578063fffbebdd14610305575b600080fd5b3480156100dd57600080fd5b506100f2600160a060020a036004351661031a565b005b34801561010057600080fd5b50610109610483565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561014557818101518382015260200161012d565b505050509050019250505060405180910390f35b34801561016557600080fd5b506101096104e6565b34801561017a57600080fd5b5061018f600160a060020a0360043516610546565b604080519115158252519081900360200190f35b3480156101af57600080fd5b5061018f600480356024810191013561059f565b3480156101cf57600080fd5b50610109600435610a8f565b3480156101e757600080fd5b506101f0610fbd565b60408051600160a060020a039092168252519081900360200190f35b34801561021857600080fd5b506100f2600160a060020a0360043516610fcc565b34801561023957600080fd5b5061018f600160a060020a03600435166110c2565b34801561025a57600080fd5b506101f061117a565b34801561026f57600080fd5b506100f2600160a060020a0360043516611189565b34801561029057600080fd5b506100f2600160a060020a036004351661127d565b3480156102b157600080fd5b50610109600435611398565b3480156102c957600080fd5b506100f2600160a060020a0360043516611404565b3480156102ea57600080fd5b506102f3611427565b60408051918252519081900360200190f35b34801561031157600080fd5b506101f061144b565b60008054600160a060020a0316331461033257600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561035957600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b60045481101561047f5781600160a060020a031660048281548110151561039e57fe5b600091825260209091200154600160a060020a03161415610477576004805460001981019081106103cb57fe5b60009182526020909120015460048054600160a060020a0390921691839081106103f157fe5b60009182526020909120018054600160a060020a031916600160a060020a039290921691909117905560048054600019019061042d90826114ca565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a161047f565b60010161037b565b5050565b606060038054806020026020016040519081016040528092919081815260200182805480156104db57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116104bd575b505050505090505b90565b606060048054806020026020016040519081016040528092919081815260200182805480156104db57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116104bd575050505050905090565b60008054600160a060020a031633148061056f57503360009081526002602052604090205460ff165b151561057a57600080fd5b5060088054600160a060020a038316600160a060020a03199091161790556001919050565b600080548190600160a060020a03163314806105ca57503360009081526001602052604090205460ff165b15156105d557600080fd5b600754600160a060020a03161515610637576040805160e560020a62461bcd02815260206004820152601960248201527f53746f72616765206973206e6f7420636f6e6669672079657400000000000000604482015290519081900360640190fd5b600983146106b5576040805160e560020a62461bcd02815260206004820152602860248201527f496e636f727265637420706172616d65746572206c656e6774682c206e65656460448201527f20746f2062652039000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006005818686828181106106c657fe5b6020908102929092013583525081019190915260400160002054600160a060020a03161461073e576040805160e560020a62461bcd02815260206004820181905260248201527f50726f6475637420626174636820697320616c72656164792065786973746564604482015290519081900360640190fd5b7f50726f647563744861727665737465720000000000000000000000000000000084846107696114f3565b83815260406020808301828152918301849052606083019085908502808284378201915050945050505050604051809103906000f0801580156107b0573d6000803e3d6000fd5b509050806005600083600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156107f657600080fd5b505af115801561080a573d6000803e3d6000fd5b505050506040513d602081101561082057600080fd5b50518152602080820192909252604090810160009081208054600160a060020a031916600160a060020a0395861617905581517f073fae83000000000000000000000000000000000000000000000000000000008152915160069491939186169263073fae8392600480830193919282900301818787803b1580156108a457600080fd5b505af11580156108b8573d6000803e3d6000fd5b505050506040513d60208110156108ce57600080fd5b505181526020808201929092526040908101600090812080546001810182559082529281209092018054600160a060020a031916600160a060020a0385811691821790925560075483517f9870d7fe0000000000000000000000000000000000000000000000000000000081529216600483015291519192639870d7fe9260248084019382900301818387803b15801561096757600080fd5b505af115801561097b573d6000803e3d6000fd5b50505050600760009054906101000a9004600160a060020a0316600160a060020a031663c924d9a882600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156109e157600080fd5b505af11580156109f5573d6000803e3d6000fd5b505050506040513d6020811015610a0b57600080fd5b50516040805160e060020a63ffffffff85160281526004810192909252600160a060020a03851660248301525160448083019260209291908290030181600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d6020811015610a8357600080fd5b50600195945050505050565b60008181526005602090815260409182902054825160088082526101208201909452606093600160a060020a039092169284929082016101008038833901905050905081600160a060020a031663073fae836040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050506040513d6020811015610b3a57600080fd5b5051815182906000908110610b4b57fe5b6020908102909101810191909152604080517f7f7650eb0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692637f7650eb92600480820193918290030181600087803b158015610bb057600080fd5b505af1158015610bc4573d6000803e3d6000fd5b505050506040513d6020811015610bda57600080fd5b5051815182906001908110610beb57fe5b6020908102909101810191909152604080517f516f279e0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263516f279e92600480820193918290030181600087803b158015610c5057600080fd5b505af1158015610c64573d6000803e3d6000fd5b505050506040513d6020811015610c7a57600080fd5b5051815182906002908110610c8b57fe5b6020908102909101810191909152604080517fc5ce39110000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263c5ce391192600480820193918290030181600087803b158015610cf057600080fd5b505af1158015610d04573d6000803e3d6000fd5b505050506040513d6020811015610d1a57600080fd5b5051815182906003908110610d2b57fe5b6020908102909101810191909152604080517ff0935ec40000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f0935ec492600480820193918290030181600087803b158015610d9057600080fd5b505af1158015610da4573d6000803e3d6000fd5b505050506040513d6020811015610dba57600080fd5b5051815182906004908110610dcb57fe5b6020908102909101810191909152604080517f2e943fbd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03851692632e943fbd92600480820193918290030181600087803b158015610e3057600080fd5b505af1158015610e44573d6000803e3d6000fd5b505050506040513d6020811015610e5a57600080fd5b5051815182906005908110610e6b57fe5b6020908102909101810191909152604080517f30e4b9110000000000000000000000000000000000000000000000000000000081529051600160a060020a038516926330e4b91192600480820193918290030181600087803b158015610ed057600080fd5b505af1158015610ee4573d6000803e3d6000fd5b505050506040513d6020811015610efa57600080fd5b5051815182906006908110610f0b57fe5b6020908102909101810191909152604080517ff4834bbc0000000000000000000000000000000000000000000000000000000081529051600160a060020a0385169263f4834bbc92600480820193918290030181600087803b158015610f7057600080fd5b505af1158015610f84573d6000803e3d6000fd5b505050506040513d6020811015610f9a57600080fd5b5051815182906007908110610fab57fe5b60209081029091010152915050919050565b600754600160a060020a031681565b600054600160a060020a03163314610fe357600080fd5b600160a060020a03811660009081526002602052604090205460ff161561100957600080fd5b60045460141161101857600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054600160a060020a0319169091179055565b60008054600160a060020a03163314806110eb57503360009081526002602052604090205460ff165b15156110f657600080fd5b600160a060020a0382161515611156576040805160e560020a62461bcd02815260206004820152601760248201527f496e76616c69642073746f726167652061646472657373000000000000000000604482015290519081900360640190fd5b60078054600160a060020a031916600160a060020a03939093169290921790915590565b600054600160a060020a031681565b600054600160a060020a031633146111a057600080fd5b600160a060020a03811660009081526001602052604090205460ff16156111c657600080fd5b6003546014116111d557600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018054600160a060020a0319169091179055565b60008054600160a060020a0316331461129557600080fd5b600160a060020a03821660009081526001602052604090205460ff1615156112bc57600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b60035481101561047f5781600160a060020a031660038281548110151561130157fe5b600091825260209091200154600160a060020a031614156113905760038054600019810190811061132e57fe5b60009182526020909120015460038054600160a060020a03909216918390811061135457fe5b60009182526020909120018054600160a060020a031916600160a060020a039290921691909117905560038054600019019061042d90826114ca565b6001016112de565b6000818152600660209081526040918290208054835181840281018401909452808452606093928301828280156113f857602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116113da575b50505050509050919050565b600054600160a060020a0316331461141b57600080fd5b6114248161145a565b50565b7f50726f647563744861727665737465720000000000000000000000000000000090565b600854600160a060020a031681565b600160a060020a038116151561146f57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b8154818355818111156114ee576000838152602090206114ee918101908301611504565b505050565b6040516115be806200152383390190565b6104e391905b8082111561151e576000815560010161150a565b509056006080604052606460165560016017556001601b5534801561001f57600080fd5b506040516115be3803806115be833981016040528051602082015160008054600160a060020a0319163317815560058390559201805191929091829190811061006457fe5b6020908102909101015160065580518190600190811061008057fe5b6020908102909101015160155580518190600290811061009c57fe5b602090810290910101516008558051819060039081106100b857fe5b602090810290910101516009558051819060049081106100d457fe5b60209081029091010151600a558051819060059081106100f057fe5b60209081029091010151600b5580518190600690811061010c57fe5b60209081029091010151600c5580518190600790811061012857fe5b60209081029091010151600d5580518190600890811061014457fe5b60209081029091010151600e55505042600f8190556010556114538061016b6000396000f30060806040526004361061019d5763ffffffff60e060020a600035041663073fae8381146101a2578063139d7fed146101c95780631785f53c146101de5780631eee993a1461020157806320982bce1461023657806327a099d81461024e5780632e943fbd146102b357806330e4b911146102c857806331ae450b146102dd5780633571ee35146102f2578063516f279e1461030a57806354fd4d501461031f578063604080f714610334578063704802751461035257806371bc9d9a146103735780637f7650eb1461038b57806382aefefb146103a057806383240f83146103b85780638920c339146103d05780638c835736146103e85780638da5cb5b146103fd5780639870d7fe1461042e5780639ac80dce1461044f5780639c6f2b2514610464578063aa15efc814610557578063ac8a584a1461056c578063b26e642b1461058d578063b2f4bdb0146105a5578063c5ce3911146105ba578063df4857ec146105cf578063f0935ec4146105e7578063f2fde38b146105fc578063f375d94a1461061d578063f4834bbc14610632578063f78b0be014610647575b600080fd5b3480156101ae57600080fd5b506101b761065c565b60408051918252519081900360200190f35b3480156101d557600080fd5b506101b7610662565b3480156101ea57600080fd5b506101ff600160a060020a0360043516610668565b005b34801561020d57600080fd5b50610222600160a060020a03600435166107de565b604080519115158252519081900360200190f35b34801561024257600080fd5b506101b7600435610a0e565b34801561025a57600080fd5b50610263610a2d565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561029f578181015183820152602001610287565b505050509050019250505060405180910390f35b3480156102bf57600080fd5b506101b7610a90565b3480156102d457600080fd5b506101b7610a96565b3480156102e957600080fd5b50610263610a9c565b3480156102fe57600080fd5b506101b7600435610afc565b34801561031657600080fd5b506101b7610b0a565b34801561032b57600080fd5b506101b7610b10565b34801561034057600080fd5b50610222600435602435604435610b16565b34801561035e57600080fd5b506101ff600160a060020a0360043516610c51565b34801561037f57600080fd5b50610222600435610d54565b34801561039757600080fd5b506101b7610d91565b3480156103ac57600080fd5b506101b7600435610d97565b3480156103c457600080fd5b506101b7600435610da5565b3480156103dc57600080fd5b506101b7600435610db3565b3480156103f457600080fd5b506101b7610dc1565b34801561040957600080fd5b50610412610dc7565b60408051600160a060020a039092168252519081900360200190f35b34801561043a57600080fd5b506101ff600160a060020a0360043516610dd6565b34801561045b57600080fd5b506101b7610ed7565b34801561047057600080fd5b50610479610edd565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156104c15781810151838201526020016104a9565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156105005781810151838201526020016104e8565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561053f578181015183820152602001610527565b50505050905001965050505050505060405180910390f35b34801561056357600080fd5b50610479610ff5565b34801561057857600080fd5b506101ff600160a060020a0360043516611102565b34801561059957600080fd5b5061041260043561122a565b3480156105b157600080fd5b506101b7611252565b3480156105c657600080fd5b506101b7611258565b3480156105db57600080fd5b5061022260043561125e565b3480156105f357600080fd5b506101b7611328565b34801561060857600080fd5b506101ff600160a060020a036004351661132e565b34801561062957600080fd5b506101b7611351565b34801561063e57600080fd5b506101b7611357565b34801561065357600080fd5b506101b761135d565b60155481565b60055481565b60008054600160a060020a0316331461068057600080fd5b600160a060020a03821660009081526002602052604090205460ff1615156106a757600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156107da5781600160a060020a03166004828154811015156106ec57fe5b600091825260209091200154600160a060020a031614156107d25760048054600019810190811061071957fe5b60009182526020909120015460048054600160a060020a03909216918390811061073f57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560048054600019019061078890826113e0565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a16107da565b6001016106c9565b5050565b60008054600160a060020a031633148061080757503360009081526001602052604090205460ff165b151561081257600080fd5b601654601b541061088457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f43616e6e6f7420616464206d6f7265206368696c640000000000000000000000604482015290519081900360640190fd5b81600160a060020a031663f78b0be06040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108c257600080fd5b505af11580156108d6573d6000803e3d6000fd5b505050506040513d60208110156108ec57600080fd5b5051601b546018805490916000190190811061090457fe5b90600052602060002001816000191690555081600160a060020a0316637f7650eb6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561095457600080fd5b505af1158015610968573d6000803e3d6000fd5b505050506040513d602081101561097e57600080fd5b5051601b546019805490916000190190811061099657fe5b6000918252602082200191909155601a805460018181018355919092527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e9091018054600160a060020a03851673ffffffffffffffffffffffffffffffffffffffff19909116179055601b8054820190559050919050565b6014805482908110610a1c57fe5b600091825260209091200154905081565b60606003805480602002602001604051908101604052809291908181526020018280548015610a8557602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610a67575b505050505090505b90565b600c5481565b600d5481565b60606004805480602002602001604051908101604052809291908181526020018280548015610a8557602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610a67575050505050905090565b6018805482908110610a1c57fe5b60095481565b60175481565b60008054600160a060020a0316331480610b3f57503360009081526001602052604090205460ff165b1515610b4a57600080fd5b60008211610bb957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420686973746f72792074696d65000000000000000000000000604482015290519081900360640190fd5b506012805460018082019092557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440193909355601380548085019091557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001919091556014805480840182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec015590565b600054600160a060020a03163314610c6857600080fd5b600160a060020a03811660009081526002602052604090205460ff1615610c8e57600080fd5b600454601411610c9d57600080fd5b60408051600160a060020a03831681526001602082015281517f8a7039f4ea6f86a6a98d9c1efb0ea9d190f6b3fa37c32627cf48f767f51e36d5929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60008054600160a060020a0316331480610d7d57503360009081526001602052604090205460ff165b1515610d8857600080fd5b60119190915590565b60085481565b6019805482908110610a1c57fe5b6012805482908110610a1c57fe5b6013805482908110610a1c57fe5b601b5481565b600054600160a060020a031681565b600054600160a060020a03163314610ded57600080fd5b600160a060020a03811660009081526001602052604090205460ff1615610e1357600080fd5b600354601411610e2257600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a031660008181526001602081905260408220805460ff1916821790556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b60115481565b606080606060186019601a82805480602002602001604051908101604052809291908181526020018280548015610f3457602002820191906000526020600020905b81548152600190910190602001808311610f1f575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015610f8757602002820191906000526020600020905b81548152600190910190602001808311610f72575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610fe357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610fc5575b50505050509050925092509250909192565b60608060606012601360148280548060200260200160405190810160405280929190818152602001828054801561104c57602002820191906000526020600020905b81548152600190910190602001808311611037575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561109f57602002820191906000526020600020905b8154815260019091019060200180831161108a575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610fe357602002820191906000526020600020905b8154815260200190600101908083116110dd5750505050509050925092509250909192565b60008054600160a060020a0316331461111a57600080fd5b600160a060020a03821660009081526001602052604090205460ff16151561114157600080fd5b50600160a060020a0381166000908152600160205260408120805460ff191690555b6003548110156107da5781600160a060020a031660038281548110151561118657fe5b600091825260209091200154600160a060020a03161415611222576003805460001981019081106111b357fe5b60009182526020909120015460038054600160a060020a0390921691839081106111d957fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560038054600019019061078890826113e0565b600101611163565b601a80548290811061123857fe5b600091825260209091200154600160a060020a0316905081565b600f5481565b600a5481565b600080548190600160a060020a031633148061128957503360009081526001602052604090205460ff165b151561129457600080fd5b5060005b6018548110156113225760188054849190839081106112b357fe5b600091825260209091200154141561131a5760186001601b54038154811015156112d957fe5b90600052602060002001546018828154811015156112f357fe5b600091825260209091200155601b546018805490916000190190811061131557fe5b506000525b600101611298565b50919050565b600b5481565b600054600160a060020a0316331461134557600080fd5b61134e81611363565b50565b60105481565b600e5481565b60065481565b600160a060020a038116151561137857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81548183558181111561140457600083815260209020611404918101908301611409565b505050565b610a8d91905b80821115611423576000815560010161140f565b50905600a165627a7a72305820a15b1c6a987eb3aded576297355f2a38606c8280759b07b6e498a7645268a31e0029a165627a7a723058206e3ec8668daabc3d86eb2cd2c9e5162146f76be611c59320e96a54a4aa5fbf4e0029";

    public static final String FUNC_REMOVEADMIN = "removeAdmin";

    public static final String FUNC_GETOPERATORS = "getOperators";

    public static final String FUNC_GETADMINS = "getAdmins";

    public static final String FUNC_SETPREVIOUSNODE = "setPreviousNode";

    public static final String FUNC_LITTLEPOPRODUCTHISTORY = "littlepoProductHistory";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_SETPRODUCTSTORAGE = "setProductStorage";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_REMOVEOPERATOR = "removeOperator";

    public static final String FUNC_GETPRODUCTBATCHBYBATCHNO = "getProductBatchByBatchNo";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_PREVIOUSNODE = "previousNode";

    public static final String FUNC_GETNODENAME = "getNodeName";

    public static final String FUNC_CREATEPRODUCTBATCH = "createProductBatch";

    public static final String FUNC_GETPRODUCTBATCHINFO = "getProductBatchInfo";

    public static final Event OPERATORADDED_EVENT = new Event("OperatorAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ADMINADDED_EVENT = new Event("AdminAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected ProductHarvesterNode(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProductHarvesterNode(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProductHarvesterNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProductHarvesterNode(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> removeAdmin(Address admin) {
        final Function function = new Function(
                FUNC_REMOVEADMIN, 
                Arrays.<Type>asList(admin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getOperators() {
        final Function function = new Function(FUNC_GETOPERATORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Address>> getAdmins() {
        final Function function = new Function(FUNC_GETADMINS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setPreviousNode(Address _baseNode) {
        final Function function = new Function(
                FUNC_SETPREVIOUSNODE, 
                Arrays.<Type>asList(_baseNode), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> littlepoProductHistory() {
        final Function function = new Function(FUNC_LITTLEPOPRODUCTHISTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(Address newAdmin) {
        final Function function = new Function(
                FUNC_ADDADMIN, 
                Arrays.<Type>asList(newAdmin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setProductStorage(Address _littlepoProductHistory) {
        final Function function = new Function(
                FUNC_SETPRODUCTSTORAGE, 
                Arrays.<Type>asList(_littlepoProductHistory), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addOperator(Address newOperator) {
        final Function function = new Function(
                FUNC_ADDOPERATOR, 
                Arrays.<Type>asList(newOperator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeOperator(Address operator) {
        final Function function = new Function(
                FUNC_REMOVEOPERATOR, 
                Arrays.<Type>asList(operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Address>> getProductBatchByBatchNo(Bytes32 _bBatchNo) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHBYBATCHNO, 
                Arrays.<Type>asList(_bBatchNo), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> previousNode() {
        final Function function = new Function(FUNC_PREVIOUSNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<OperatorAddedEventResponse> getOperatorAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATORADDED_EVENT, transactionReceipt);
        ArrayList<OperatorAddedEventResponse> responses = new ArrayList<OperatorAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OperatorAddedEventResponse>() {
            @Override
            public OperatorAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OPERATORADDED_EVENT, log);
                OperatorAddedEventResponse typedResponse = new OperatorAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newOperator = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OperatorAddedEventResponse> operatorAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OPERATORADDED_EVENT));
        return operatorAddedEventObservable(filter);
    }

    public List<AdminAddedEventResponse> getAdminAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINADDED_EVENT, transactionReceipt);
        ArrayList<AdminAddedEventResponse> responses = new ArrayList<AdminAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AdminAddedEventResponse>() {
            @Override
            public AdminAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINADDED_EVENT, log);
                AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newAdmin = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.isAdd = (Bool) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<AdminAddedEventResponse> adminAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINADDED_EVENT));
        return adminAddedEventObservable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public RemoteCall<Bytes32> getNodeName() {
        final Function function = new Function(FUNC_GETNODENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> createProductBatch(DynamicArray<Bytes32> bArgs) {
        final Function function = new Function(
                FUNC_CREATEPRODUCTBATCH, 
                Arrays.<Type>asList(bArgs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getProductBatchInfo(Bytes32 _qrCodeId) {
        final Function function = new Function(FUNC_GETPRODUCTBATCHINFO, 
                Arrays.<Type>asList(_qrCodeId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public static RemoteCall<ProductHarvesterNode> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductHarvesterNode.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProductHarvesterNode> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductHarvesterNode.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ProductHarvesterNode> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProductHarvesterNode.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProductHarvesterNode> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProductHarvesterNode.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static ProductHarvesterNode load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductHarvesterNode(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProductHarvesterNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProductHarvesterNode(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProductHarvesterNode load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ProductHarvesterNode(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProductHarvesterNode load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProductHarvesterNode(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OperatorAddedEventResponse {
        public Log log;

        public Address newOperator;

        public Bool isAdd;
    }

    public static class AdminAddedEventResponse {
        public Log log;

        public Address newAdmin;

        public Bool isAdd;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
